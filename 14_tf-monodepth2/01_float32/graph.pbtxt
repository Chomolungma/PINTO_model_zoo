node {
  name: "data_loading/input"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 192
        }
        dim {
          size: 640
        }
        dim {
          size: 3
        }
      }
    }
  }
}
node {
  name: "data_loading/sub/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.44999998807907104
      }
    }
  }
}
node {
  name: "data_loading/sub"
  op: "Sub"
  input: "data_loading/input"
  input: "data_loading/sub/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "data_loading/truediv/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.22499999403953552
      }
    }
  }
}
node {
  name: "data_loading/truediv"
  op: "RealDiv"
  input: "data_loading/sub"
  input: "data_loading/truediv/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv1/conv1/weights/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv1/conv1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\007\000\000\000\007\000\000\000\003\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv1/conv1/weights/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv1/conv1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv1/conv1/weights/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv1/conv1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.13260455429553986
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv1/conv1/weights/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "monodepth2_model/encoder/conv1/conv1/weights/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv1/conv1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv1/conv1/weights/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "monodepth2_model/encoder/conv1/conv1/weights/Initializer/truncated_normal/TruncatedNormal"
  input: "monodepth2_model/encoder/conv1/conv1/weights/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv1/conv1/weights"
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv1/conv1/weights/Initializer/truncated_normal"
  op: "Add"
  input: "monodepth2_model/encoder/conv1/conv1/weights/Initializer/truncated_normal/mul"
  input: "monodepth2_model/encoder/conv1/conv1/weights/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv1/conv1/weights"
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv1/conv1/weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv1/conv1/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 7
        }
        dim {
          size: 7
        }
        dim {
          size: 3
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv1/conv1/weights/Assign"
  op: "Assign"
  input: "monodepth2_model/encoder/conv1/conv1/weights"
  input: "monodepth2_model/encoder/conv1/conv1/weights/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv1/conv1/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv1/conv1/weights/read"
  op: "Identity"
  input: "monodepth2_model/encoder/conv1/conv1/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv1/conv1/weights"
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv1/conv1/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv1/conv1/Conv2D"
  op: "Conv2D"
  input: "data_loading/truediv"
  input: "monodepth2_model/encoder/conv1/conv1/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv1/BatchNorm/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv1/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv1/BatchNorm/gamma"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv1/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv1/BatchNorm/gamma/Assign"
  op: "Assign"
  input: "monodepth2_model/encoder/conv1/BatchNorm/gamma"
  input: "monodepth2_model/encoder/conv1/BatchNorm/gamma/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv1/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv1/BatchNorm/gamma/read"
  op: "Identity"
  input: "monodepth2_model/encoder/conv1/BatchNorm/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv1/BatchNorm/gamma"
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv1/BatchNorm/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv1/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv1/BatchNorm/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv1/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv1/BatchNorm/beta/Assign"
  op: "Assign"
  input: "monodepth2_model/encoder/conv1/BatchNorm/beta"
  input: "monodepth2_model/encoder/conv1/BatchNorm/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv1/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv1/BatchNorm/beta/read"
  op: "Identity"
  input: "monodepth2_model/encoder/conv1/BatchNorm/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv1/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv1/BatchNorm/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv1/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv1/BatchNorm/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv1/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv1/BatchNorm/moving_mean/Assign"
  op: "Assign"
  input: "monodepth2_model/encoder/conv1/BatchNorm/moving_mean"
  input: "monodepth2_model/encoder/conv1/BatchNorm/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv1/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv1/BatchNorm/moving_mean/read"
  op: "Identity"
  input: "monodepth2_model/encoder/conv1/BatchNorm/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv1/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv1/BatchNorm/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv1/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv1/BatchNorm/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv1/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv1/BatchNorm/moving_variance/Assign"
  op: "Assign"
  input: "monodepth2_model/encoder/conv1/BatchNorm/moving_variance"
  input: "monodepth2_model/encoder/conv1/BatchNorm/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv1/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv1/BatchNorm/moving_variance/read"
  op: "Identity"
  input: "monodepth2_model/encoder/conv1/BatchNorm/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv1/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv1/BatchNorm/FusedBatchNormV3"
  op: "FusedBatchNormV3"
  input: "monodepth2_model/encoder/conv1/conv1/Conv2D"
  input: "monodepth2_model/encoder/conv1/BatchNorm/gamma/read"
  input: "monodepth2_model/encoder/conv1/BatchNorm/beta/read"
  input: "monodepth2_model/encoder/conv1/BatchNorm/moving_mean/read"
  input: "monodepth2_model/encoder/conv1/BatchNorm/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "U"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 1.0009999641624745e-05
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv1/BatchNorm/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.949999988079071
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv1/relu1"
  op: "Relu"
  input: "monodepth2_model/encoder/conv1/BatchNorm/FusedBatchNormV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv1/pool/MaxPool"
  op: "MaxPool"
  input: "monodepth2_model/encoder/conv1/relu1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "ksize"
    value {
      list {
        i: 1
        i: 3
        i: 3
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv2_1/conv1/weights/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv2_1/conv1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000@\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv2_1/conv1/weights/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv2_1/conv1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv2_1/conv1/weights/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv2_1/conv1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.06698936223983765
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv2_1/conv1/weights/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "monodepth2_model/encoder/conv2_1/conv1/weights/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv2_1/conv1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv2_1/conv1/weights/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "monodepth2_model/encoder/conv2_1/conv1/weights/Initializer/truncated_normal/TruncatedNormal"
  input: "monodepth2_model/encoder/conv2_1/conv1/weights/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv2_1/conv1/weights"
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv2_1/conv1/weights/Initializer/truncated_normal"
  op: "Add"
  input: "monodepth2_model/encoder/conv2_1/conv1/weights/Initializer/truncated_normal/mul"
  input: "monodepth2_model/encoder/conv2_1/conv1/weights/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv2_1/conv1/weights"
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv2_1/conv1/weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv2_1/conv1/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 64
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv2_1/conv1/weights/Assign"
  op: "Assign"
  input: "monodepth2_model/encoder/conv2_1/conv1/weights"
  input: "monodepth2_model/encoder/conv2_1/conv1/weights/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv2_1/conv1/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv2_1/conv1/weights/read"
  op: "Identity"
  input: "monodepth2_model/encoder/conv2_1/conv1/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv2_1/conv1/weights"
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv2_1/conv1/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv2_1/conv1/Conv2D"
  op: "Conv2D"
  input: "monodepth2_model/encoder/conv1/pool/MaxPool"
  input: "monodepth2_model/encoder/conv2_1/conv1/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv2_1/BatchNorm/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv2_1/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv2_1/BatchNorm/gamma"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv2_1/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv2_1/BatchNorm/gamma/Assign"
  op: "Assign"
  input: "monodepth2_model/encoder/conv2_1/BatchNorm/gamma"
  input: "monodepth2_model/encoder/conv2_1/BatchNorm/gamma/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv2_1/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv2_1/BatchNorm/gamma/read"
  op: "Identity"
  input: "monodepth2_model/encoder/conv2_1/BatchNorm/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv2_1/BatchNorm/gamma"
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv2_1/BatchNorm/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv2_1/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv2_1/BatchNorm/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv2_1/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv2_1/BatchNorm/beta/Assign"
  op: "Assign"
  input: "monodepth2_model/encoder/conv2_1/BatchNorm/beta"
  input: "monodepth2_model/encoder/conv2_1/BatchNorm/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv2_1/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv2_1/BatchNorm/beta/read"
  op: "Identity"
  input: "monodepth2_model/encoder/conv2_1/BatchNorm/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv2_1/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv2_1/BatchNorm/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv2_1/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv2_1/BatchNorm/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv2_1/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv2_1/BatchNorm/moving_mean/Assign"
  op: "Assign"
  input: "monodepth2_model/encoder/conv2_1/BatchNorm/moving_mean"
  input: "monodepth2_model/encoder/conv2_1/BatchNorm/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv2_1/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv2_1/BatchNorm/moving_mean/read"
  op: "Identity"
  input: "monodepth2_model/encoder/conv2_1/BatchNorm/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv2_1/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv2_1/BatchNorm/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv2_1/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv2_1/BatchNorm/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv2_1/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv2_1/BatchNorm/moving_variance/Assign"
  op: "Assign"
  input: "monodepth2_model/encoder/conv2_1/BatchNorm/moving_variance"
  input: "monodepth2_model/encoder/conv2_1/BatchNorm/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv2_1/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv2_1/BatchNorm/moving_variance/read"
  op: "Identity"
  input: "monodepth2_model/encoder/conv2_1/BatchNorm/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv2_1/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv2_1/BatchNorm/FusedBatchNormV3"
  op: "FusedBatchNormV3"
  input: "monodepth2_model/encoder/conv2_1/conv1/Conv2D"
  input: "monodepth2_model/encoder/conv2_1/BatchNorm/gamma/read"
  input: "monodepth2_model/encoder/conv2_1/BatchNorm/beta/read"
  input: "monodepth2_model/encoder/conv2_1/BatchNorm/moving_mean/read"
  input: "monodepth2_model/encoder/conv2_1/BatchNorm/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "U"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 1.0009999641624745e-05
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv2_1/BatchNorm/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.949999988079071
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv2_1/relu1"
  op: "Relu"
  input: "monodepth2_model/encoder/conv2_1/BatchNorm/FusedBatchNormV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv2_1/conv2/weights/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv2_1/conv2/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000@\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv2_1/conv2/weights/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv2_1/conv2/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv2_1/conv2/weights/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv2_1/conv2/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.06698936223983765
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv2_1/conv2/weights/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "monodepth2_model/encoder/conv2_1/conv2/weights/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv2_1/conv2/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv2_1/conv2/weights/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "monodepth2_model/encoder/conv2_1/conv2/weights/Initializer/truncated_normal/TruncatedNormal"
  input: "monodepth2_model/encoder/conv2_1/conv2/weights/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv2_1/conv2/weights"
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv2_1/conv2/weights/Initializer/truncated_normal"
  op: "Add"
  input: "monodepth2_model/encoder/conv2_1/conv2/weights/Initializer/truncated_normal/mul"
  input: "monodepth2_model/encoder/conv2_1/conv2/weights/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv2_1/conv2/weights"
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv2_1/conv2/weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv2_1/conv2/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 64
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv2_1/conv2/weights/Assign"
  op: "Assign"
  input: "monodepth2_model/encoder/conv2_1/conv2/weights"
  input: "monodepth2_model/encoder/conv2_1/conv2/weights/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv2_1/conv2/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv2_1/conv2/weights/read"
  op: "Identity"
  input: "monodepth2_model/encoder/conv2_1/conv2/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv2_1/conv2/weights"
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv2_1/conv2/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv2_1/conv2/Conv2D"
  op: "Conv2D"
  input: "monodepth2_model/encoder/conv2_1/relu1"
  input: "monodepth2_model/encoder/conv2_1/conv2/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv2_1/BatchNorm_1/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv2_1/BatchNorm_1/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv2_1/BatchNorm_1/gamma"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv2_1/BatchNorm_1/gamma"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv2_1/BatchNorm_1/gamma/Assign"
  op: "Assign"
  input: "monodepth2_model/encoder/conv2_1/BatchNorm_1/gamma"
  input: "monodepth2_model/encoder/conv2_1/BatchNorm_1/gamma/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv2_1/BatchNorm_1/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv2_1/BatchNorm_1/gamma/read"
  op: "Identity"
  input: "monodepth2_model/encoder/conv2_1/BatchNorm_1/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv2_1/BatchNorm_1/gamma"
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv2_1/BatchNorm_1/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv2_1/BatchNorm_1/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv2_1/BatchNorm_1/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv2_1/BatchNorm_1/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv2_1/BatchNorm_1/beta/Assign"
  op: "Assign"
  input: "monodepth2_model/encoder/conv2_1/BatchNorm_1/beta"
  input: "monodepth2_model/encoder/conv2_1/BatchNorm_1/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv2_1/BatchNorm_1/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv2_1/BatchNorm_1/beta/read"
  op: "Identity"
  input: "monodepth2_model/encoder/conv2_1/BatchNorm_1/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv2_1/BatchNorm_1/beta"
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv2_1/BatchNorm_1/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv2_1/BatchNorm_1/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv2_1/BatchNorm_1/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv2_1/BatchNorm_1/moving_mean"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv2_1/BatchNorm_1/moving_mean/Assign"
  op: "Assign"
  input: "monodepth2_model/encoder/conv2_1/BatchNorm_1/moving_mean"
  input: "monodepth2_model/encoder/conv2_1/BatchNorm_1/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv2_1/BatchNorm_1/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv2_1/BatchNorm_1/moving_mean/read"
  op: "Identity"
  input: "monodepth2_model/encoder/conv2_1/BatchNorm_1/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv2_1/BatchNorm_1/moving_mean"
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv2_1/BatchNorm_1/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv2_1/BatchNorm_1/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv2_1/BatchNorm_1/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv2_1/BatchNorm_1/moving_variance"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv2_1/BatchNorm_1/moving_variance/Assign"
  op: "Assign"
  input: "monodepth2_model/encoder/conv2_1/BatchNorm_1/moving_variance"
  input: "monodepth2_model/encoder/conv2_1/BatchNorm_1/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv2_1/BatchNorm_1/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv2_1/BatchNorm_1/moving_variance/read"
  op: "Identity"
  input: "monodepth2_model/encoder/conv2_1/BatchNorm_1/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv2_1/BatchNorm_1/moving_variance"
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv2_1/BatchNorm_1/FusedBatchNormV3"
  op: "FusedBatchNormV3"
  input: "monodepth2_model/encoder/conv2_1/conv2/Conv2D"
  input: "monodepth2_model/encoder/conv2_1/BatchNorm_1/gamma/read"
  input: "monodepth2_model/encoder/conv2_1/BatchNorm_1/beta/read"
  input: "monodepth2_model/encoder/conv2_1/BatchNorm_1/moving_mean/read"
  input: "monodepth2_model/encoder/conv2_1/BatchNorm_1/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "U"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 1.0009999641624745e-05
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv2_1/BatchNorm_1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.949999988079071
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv2_1/add"
  op: "AddV2"
  input: "monodepth2_model/encoder/conv2_1/BatchNorm_1/FusedBatchNormV3"
  input: "monodepth2_model/encoder/conv1/pool/MaxPool"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv2_1/relu2"
  op: "Relu"
  input: "monodepth2_model/encoder/conv2_1/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv2_2/conv1/weights/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv2_2/conv1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000@\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv2_2/conv1/weights/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv2_2/conv1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv2_2/conv1/weights/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv2_2/conv1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.06698936223983765
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv2_2/conv1/weights/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "monodepth2_model/encoder/conv2_2/conv1/weights/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv2_2/conv1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv2_2/conv1/weights/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "monodepth2_model/encoder/conv2_2/conv1/weights/Initializer/truncated_normal/TruncatedNormal"
  input: "monodepth2_model/encoder/conv2_2/conv1/weights/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv2_2/conv1/weights"
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv2_2/conv1/weights/Initializer/truncated_normal"
  op: "Add"
  input: "monodepth2_model/encoder/conv2_2/conv1/weights/Initializer/truncated_normal/mul"
  input: "monodepth2_model/encoder/conv2_2/conv1/weights/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv2_2/conv1/weights"
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv2_2/conv1/weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv2_2/conv1/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 64
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv2_2/conv1/weights/Assign"
  op: "Assign"
  input: "monodepth2_model/encoder/conv2_2/conv1/weights"
  input: "monodepth2_model/encoder/conv2_2/conv1/weights/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv2_2/conv1/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv2_2/conv1/weights/read"
  op: "Identity"
  input: "monodepth2_model/encoder/conv2_2/conv1/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv2_2/conv1/weights"
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv2_2/conv1/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv2_2/conv1/Conv2D"
  op: "Conv2D"
  input: "monodepth2_model/encoder/conv2_1/relu2"
  input: "monodepth2_model/encoder/conv2_2/conv1/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv2_2/BatchNorm/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv2_2/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv2_2/BatchNorm/gamma"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv2_2/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv2_2/BatchNorm/gamma/Assign"
  op: "Assign"
  input: "monodepth2_model/encoder/conv2_2/BatchNorm/gamma"
  input: "monodepth2_model/encoder/conv2_2/BatchNorm/gamma/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv2_2/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv2_2/BatchNorm/gamma/read"
  op: "Identity"
  input: "monodepth2_model/encoder/conv2_2/BatchNorm/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv2_2/BatchNorm/gamma"
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv2_2/BatchNorm/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv2_2/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv2_2/BatchNorm/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv2_2/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv2_2/BatchNorm/beta/Assign"
  op: "Assign"
  input: "monodepth2_model/encoder/conv2_2/BatchNorm/beta"
  input: "monodepth2_model/encoder/conv2_2/BatchNorm/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv2_2/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv2_2/BatchNorm/beta/read"
  op: "Identity"
  input: "monodepth2_model/encoder/conv2_2/BatchNorm/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv2_2/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv2_2/BatchNorm/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv2_2/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv2_2/BatchNorm/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv2_2/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv2_2/BatchNorm/moving_mean/Assign"
  op: "Assign"
  input: "monodepth2_model/encoder/conv2_2/BatchNorm/moving_mean"
  input: "monodepth2_model/encoder/conv2_2/BatchNorm/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv2_2/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv2_2/BatchNorm/moving_mean/read"
  op: "Identity"
  input: "monodepth2_model/encoder/conv2_2/BatchNorm/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv2_2/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv2_2/BatchNorm/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv2_2/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv2_2/BatchNorm/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv2_2/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv2_2/BatchNorm/moving_variance/Assign"
  op: "Assign"
  input: "monodepth2_model/encoder/conv2_2/BatchNorm/moving_variance"
  input: "monodepth2_model/encoder/conv2_2/BatchNorm/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv2_2/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv2_2/BatchNorm/moving_variance/read"
  op: "Identity"
  input: "monodepth2_model/encoder/conv2_2/BatchNorm/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv2_2/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv2_2/BatchNorm/FusedBatchNormV3"
  op: "FusedBatchNormV3"
  input: "monodepth2_model/encoder/conv2_2/conv1/Conv2D"
  input: "monodepth2_model/encoder/conv2_2/BatchNorm/gamma/read"
  input: "monodepth2_model/encoder/conv2_2/BatchNorm/beta/read"
  input: "monodepth2_model/encoder/conv2_2/BatchNorm/moving_mean/read"
  input: "monodepth2_model/encoder/conv2_2/BatchNorm/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "U"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 1.0009999641624745e-05
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv2_2/BatchNorm/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.949999988079071
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv2_2/relu1"
  op: "Relu"
  input: "monodepth2_model/encoder/conv2_2/BatchNorm/FusedBatchNormV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv2_2/conv2/weights/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv2_2/conv2/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000@\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv2_2/conv2/weights/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv2_2/conv2/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv2_2/conv2/weights/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv2_2/conv2/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.06698936223983765
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv2_2/conv2/weights/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "monodepth2_model/encoder/conv2_2/conv2/weights/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv2_2/conv2/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv2_2/conv2/weights/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "monodepth2_model/encoder/conv2_2/conv2/weights/Initializer/truncated_normal/TruncatedNormal"
  input: "monodepth2_model/encoder/conv2_2/conv2/weights/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv2_2/conv2/weights"
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv2_2/conv2/weights/Initializer/truncated_normal"
  op: "Add"
  input: "monodepth2_model/encoder/conv2_2/conv2/weights/Initializer/truncated_normal/mul"
  input: "monodepth2_model/encoder/conv2_2/conv2/weights/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv2_2/conv2/weights"
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv2_2/conv2/weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv2_2/conv2/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 64
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv2_2/conv2/weights/Assign"
  op: "Assign"
  input: "monodepth2_model/encoder/conv2_2/conv2/weights"
  input: "monodepth2_model/encoder/conv2_2/conv2/weights/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv2_2/conv2/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv2_2/conv2/weights/read"
  op: "Identity"
  input: "monodepth2_model/encoder/conv2_2/conv2/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv2_2/conv2/weights"
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv2_2/conv2/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv2_2/conv2/Conv2D"
  op: "Conv2D"
  input: "monodepth2_model/encoder/conv2_2/relu1"
  input: "monodepth2_model/encoder/conv2_2/conv2/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv2_2/BatchNorm_1/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv2_2/BatchNorm_1/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv2_2/BatchNorm_1/gamma"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv2_2/BatchNorm_1/gamma"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv2_2/BatchNorm_1/gamma/Assign"
  op: "Assign"
  input: "monodepth2_model/encoder/conv2_2/BatchNorm_1/gamma"
  input: "monodepth2_model/encoder/conv2_2/BatchNorm_1/gamma/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv2_2/BatchNorm_1/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv2_2/BatchNorm_1/gamma/read"
  op: "Identity"
  input: "monodepth2_model/encoder/conv2_2/BatchNorm_1/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv2_2/BatchNorm_1/gamma"
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv2_2/BatchNorm_1/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv2_2/BatchNorm_1/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv2_2/BatchNorm_1/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv2_2/BatchNorm_1/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv2_2/BatchNorm_1/beta/Assign"
  op: "Assign"
  input: "monodepth2_model/encoder/conv2_2/BatchNorm_1/beta"
  input: "monodepth2_model/encoder/conv2_2/BatchNorm_1/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv2_2/BatchNorm_1/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv2_2/BatchNorm_1/beta/read"
  op: "Identity"
  input: "monodepth2_model/encoder/conv2_2/BatchNorm_1/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv2_2/BatchNorm_1/beta"
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv2_2/BatchNorm_1/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv2_2/BatchNorm_1/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv2_2/BatchNorm_1/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv2_2/BatchNorm_1/moving_mean"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv2_2/BatchNorm_1/moving_mean/Assign"
  op: "Assign"
  input: "monodepth2_model/encoder/conv2_2/BatchNorm_1/moving_mean"
  input: "monodepth2_model/encoder/conv2_2/BatchNorm_1/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv2_2/BatchNorm_1/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv2_2/BatchNorm_1/moving_mean/read"
  op: "Identity"
  input: "monodepth2_model/encoder/conv2_2/BatchNorm_1/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv2_2/BatchNorm_1/moving_mean"
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv2_2/BatchNorm_1/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv2_2/BatchNorm_1/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv2_2/BatchNorm_1/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv2_2/BatchNorm_1/moving_variance"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv2_2/BatchNorm_1/moving_variance/Assign"
  op: "Assign"
  input: "monodepth2_model/encoder/conv2_2/BatchNorm_1/moving_variance"
  input: "monodepth2_model/encoder/conv2_2/BatchNorm_1/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv2_2/BatchNorm_1/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv2_2/BatchNorm_1/moving_variance/read"
  op: "Identity"
  input: "monodepth2_model/encoder/conv2_2/BatchNorm_1/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv2_2/BatchNorm_1/moving_variance"
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv2_2/BatchNorm_1/FusedBatchNormV3"
  op: "FusedBatchNormV3"
  input: "monodepth2_model/encoder/conv2_2/conv2/Conv2D"
  input: "monodepth2_model/encoder/conv2_2/BatchNorm_1/gamma/read"
  input: "monodepth2_model/encoder/conv2_2/BatchNorm_1/beta/read"
  input: "monodepth2_model/encoder/conv2_2/BatchNorm_1/moving_mean/read"
  input: "monodepth2_model/encoder/conv2_2/BatchNorm_1/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "U"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 1.0009999641624745e-05
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv2_2/BatchNorm_1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.949999988079071
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv2_2/add"
  op: "AddV2"
  input: "monodepth2_model/encoder/conv2_2/BatchNorm_1/FusedBatchNormV3"
  input: "monodepth2_model/encoder/conv2_1/relu2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv2_2/relu2"
  op: "Relu"
  input: "monodepth2_model/encoder/conv2_2/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv3_1/shortcut/weights/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv3_1/shortcut/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000@\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv3_1/shortcut/weights/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv3_1/shortcut/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv3_1/shortcut/weights/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv3_1/shortcut/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20096810162067413
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv3_1/shortcut/weights/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "monodepth2_model/encoder/conv3_1/shortcut/weights/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv3_1/shortcut/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv3_1/shortcut/weights/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "monodepth2_model/encoder/conv3_1/shortcut/weights/Initializer/truncated_normal/TruncatedNormal"
  input: "monodepth2_model/encoder/conv3_1/shortcut/weights/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv3_1/shortcut/weights"
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv3_1/shortcut/weights/Initializer/truncated_normal"
  op: "Add"
  input: "monodepth2_model/encoder/conv3_1/shortcut/weights/Initializer/truncated_normal/mul"
  input: "monodepth2_model/encoder/conv3_1/shortcut/weights/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv3_1/shortcut/weights"
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv3_1/shortcut/weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv3_1/shortcut/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 64
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv3_1/shortcut/weights/Assign"
  op: "Assign"
  input: "monodepth2_model/encoder/conv3_1/shortcut/weights"
  input: "monodepth2_model/encoder/conv3_1/shortcut/weights/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv3_1/shortcut/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv3_1/shortcut/weights/read"
  op: "Identity"
  input: "monodepth2_model/encoder/conv3_1/shortcut/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv3_1/shortcut/weights"
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv3_1/shortcut/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv3_1/shortcut/Conv2D"
  op: "Conv2D"
  input: "monodepth2_model/encoder/conv2_2/relu2"
  input: "monodepth2_model/encoder/conv3_1/shortcut/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv3_1/conv1/weights/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv3_1/conv1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000@\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv3_1/conv1/weights/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv3_1/conv1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv3_1/conv1/weights/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv3_1/conv1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.06698936223983765
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv3_1/conv1/weights/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "monodepth2_model/encoder/conv3_1/conv1/weights/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv3_1/conv1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv3_1/conv1/weights/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "monodepth2_model/encoder/conv3_1/conv1/weights/Initializer/truncated_normal/TruncatedNormal"
  input: "monodepth2_model/encoder/conv3_1/conv1/weights/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv3_1/conv1/weights"
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv3_1/conv1/weights/Initializer/truncated_normal"
  op: "Add"
  input: "monodepth2_model/encoder/conv3_1/conv1/weights/Initializer/truncated_normal/mul"
  input: "monodepth2_model/encoder/conv3_1/conv1/weights/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv3_1/conv1/weights"
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv3_1/conv1/weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv3_1/conv1/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 64
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv3_1/conv1/weights/Assign"
  op: "Assign"
  input: "monodepth2_model/encoder/conv3_1/conv1/weights"
  input: "monodepth2_model/encoder/conv3_1/conv1/weights/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv3_1/conv1/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv3_1/conv1/weights/read"
  op: "Identity"
  input: "monodepth2_model/encoder/conv3_1/conv1/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv3_1/conv1/weights"
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv3_1/conv1/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv3_1/conv1/Conv2D"
  op: "Conv2D"
  input: "monodepth2_model/encoder/conv2_2/relu2"
  input: "monodepth2_model/encoder/conv3_1/conv1/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv3_1/BatchNorm/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv3_1/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv3_1/BatchNorm/gamma"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv3_1/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv3_1/BatchNorm/gamma/Assign"
  op: "Assign"
  input: "monodepth2_model/encoder/conv3_1/BatchNorm/gamma"
  input: "monodepth2_model/encoder/conv3_1/BatchNorm/gamma/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv3_1/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv3_1/BatchNorm/gamma/read"
  op: "Identity"
  input: "monodepth2_model/encoder/conv3_1/BatchNorm/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv3_1/BatchNorm/gamma"
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv3_1/BatchNorm/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv3_1/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv3_1/BatchNorm/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv3_1/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv3_1/BatchNorm/beta/Assign"
  op: "Assign"
  input: "monodepth2_model/encoder/conv3_1/BatchNorm/beta"
  input: "monodepth2_model/encoder/conv3_1/BatchNorm/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv3_1/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv3_1/BatchNorm/beta/read"
  op: "Identity"
  input: "monodepth2_model/encoder/conv3_1/BatchNorm/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv3_1/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv3_1/BatchNorm/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv3_1/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv3_1/BatchNorm/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv3_1/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv3_1/BatchNorm/moving_mean/Assign"
  op: "Assign"
  input: "monodepth2_model/encoder/conv3_1/BatchNorm/moving_mean"
  input: "monodepth2_model/encoder/conv3_1/BatchNorm/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv3_1/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv3_1/BatchNorm/moving_mean/read"
  op: "Identity"
  input: "monodepth2_model/encoder/conv3_1/BatchNorm/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv3_1/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv3_1/BatchNorm/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv3_1/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv3_1/BatchNorm/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv3_1/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv3_1/BatchNorm/moving_variance/Assign"
  op: "Assign"
  input: "monodepth2_model/encoder/conv3_1/BatchNorm/moving_variance"
  input: "monodepth2_model/encoder/conv3_1/BatchNorm/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv3_1/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv3_1/BatchNorm/moving_variance/read"
  op: "Identity"
  input: "monodepth2_model/encoder/conv3_1/BatchNorm/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv3_1/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv3_1/BatchNorm/FusedBatchNormV3"
  op: "FusedBatchNormV3"
  input: "monodepth2_model/encoder/conv3_1/conv1/Conv2D"
  input: "monodepth2_model/encoder/conv3_1/BatchNorm/gamma/read"
  input: "monodepth2_model/encoder/conv3_1/BatchNorm/beta/read"
  input: "monodepth2_model/encoder/conv3_1/BatchNorm/moving_mean/read"
  input: "monodepth2_model/encoder/conv3_1/BatchNorm/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "U"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 1.0009999641624745e-05
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv3_1/BatchNorm/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.949999988079071
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv3_1/relu1"
  op: "Relu"
  input: "monodepth2_model/encoder/conv3_1/BatchNorm/FusedBatchNormV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv3_1/conv2/weights/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv3_1/conv2/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\200\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv3_1/conv2/weights/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv3_1/conv2/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv3_1/conv2/weights/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv3_1/conv2/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.04736863449215889
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv3_1/conv2/weights/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "monodepth2_model/encoder/conv3_1/conv2/weights/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv3_1/conv2/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv3_1/conv2/weights/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "monodepth2_model/encoder/conv3_1/conv2/weights/Initializer/truncated_normal/TruncatedNormal"
  input: "monodepth2_model/encoder/conv3_1/conv2/weights/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv3_1/conv2/weights"
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv3_1/conv2/weights/Initializer/truncated_normal"
  op: "Add"
  input: "monodepth2_model/encoder/conv3_1/conv2/weights/Initializer/truncated_normal/mul"
  input: "monodepth2_model/encoder/conv3_1/conv2/weights/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv3_1/conv2/weights"
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv3_1/conv2/weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv3_1/conv2/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 128
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv3_1/conv2/weights/Assign"
  op: "Assign"
  input: "monodepth2_model/encoder/conv3_1/conv2/weights"
  input: "monodepth2_model/encoder/conv3_1/conv2/weights/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv3_1/conv2/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv3_1/conv2/weights/read"
  op: "Identity"
  input: "monodepth2_model/encoder/conv3_1/conv2/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv3_1/conv2/weights"
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv3_1/conv2/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv3_1/conv2/Conv2D"
  op: "Conv2D"
  input: "monodepth2_model/encoder/conv3_1/relu1"
  input: "monodepth2_model/encoder/conv3_1/conv2/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv3_1/BatchNorm_1/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv3_1/BatchNorm_1/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv3_1/BatchNorm_1/gamma"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv3_1/BatchNorm_1/gamma"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv3_1/BatchNorm_1/gamma/Assign"
  op: "Assign"
  input: "monodepth2_model/encoder/conv3_1/BatchNorm_1/gamma"
  input: "monodepth2_model/encoder/conv3_1/BatchNorm_1/gamma/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv3_1/BatchNorm_1/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv3_1/BatchNorm_1/gamma/read"
  op: "Identity"
  input: "monodepth2_model/encoder/conv3_1/BatchNorm_1/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv3_1/BatchNorm_1/gamma"
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv3_1/BatchNorm_1/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv3_1/BatchNorm_1/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv3_1/BatchNorm_1/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv3_1/BatchNorm_1/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv3_1/BatchNorm_1/beta/Assign"
  op: "Assign"
  input: "monodepth2_model/encoder/conv3_1/BatchNorm_1/beta"
  input: "monodepth2_model/encoder/conv3_1/BatchNorm_1/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv3_1/BatchNorm_1/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv3_1/BatchNorm_1/beta/read"
  op: "Identity"
  input: "monodepth2_model/encoder/conv3_1/BatchNorm_1/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv3_1/BatchNorm_1/beta"
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv3_1/BatchNorm_1/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv3_1/BatchNorm_1/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv3_1/BatchNorm_1/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv3_1/BatchNorm_1/moving_mean"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv3_1/BatchNorm_1/moving_mean/Assign"
  op: "Assign"
  input: "monodepth2_model/encoder/conv3_1/BatchNorm_1/moving_mean"
  input: "monodepth2_model/encoder/conv3_1/BatchNorm_1/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv3_1/BatchNorm_1/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv3_1/BatchNorm_1/moving_mean/read"
  op: "Identity"
  input: "monodepth2_model/encoder/conv3_1/BatchNorm_1/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv3_1/BatchNorm_1/moving_mean"
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv3_1/BatchNorm_1/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv3_1/BatchNorm_1/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv3_1/BatchNorm_1/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv3_1/BatchNorm_1/moving_variance"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv3_1/BatchNorm_1/moving_variance/Assign"
  op: "Assign"
  input: "monodepth2_model/encoder/conv3_1/BatchNorm_1/moving_variance"
  input: "monodepth2_model/encoder/conv3_1/BatchNorm_1/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv3_1/BatchNorm_1/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv3_1/BatchNorm_1/moving_variance/read"
  op: "Identity"
  input: "monodepth2_model/encoder/conv3_1/BatchNorm_1/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv3_1/BatchNorm_1/moving_variance"
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv3_1/BatchNorm_1/FusedBatchNormV3"
  op: "FusedBatchNormV3"
  input: "monodepth2_model/encoder/conv3_1/conv2/Conv2D"
  input: "monodepth2_model/encoder/conv3_1/BatchNorm_1/gamma/read"
  input: "monodepth2_model/encoder/conv3_1/BatchNorm_1/beta/read"
  input: "monodepth2_model/encoder/conv3_1/BatchNorm_1/moving_mean/read"
  input: "monodepth2_model/encoder/conv3_1/BatchNorm_1/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "U"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 1.0009999641624745e-05
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv3_1/BatchNorm_1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.949999988079071
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv3_1/add"
  op: "AddV2"
  input: "monodepth2_model/encoder/conv3_1/BatchNorm_1/FusedBatchNormV3"
  input: "monodepth2_model/encoder/conv3_1/shortcut/Conv2D"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv3_1/relu2"
  op: "Relu"
  input: "monodepth2_model/encoder/conv3_1/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv3_2/conv1/weights/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv3_2/conv1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\200\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv3_2/conv1/weights/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv3_2/conv1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv3_2/conv1/weights/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv3_2/conv1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.04736863449215889
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv3_2/conv1/weights/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "monodepth2_model/encoder/conv3_2/conv1/weights/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv3_2/conv1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv3_2/conv1/weights/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "monodepth2_model/encoder/conv3_2/conv1/weights/Initializer/truncated_normal/TruncatedNormal"
  input: "monodepth2_model/encoder/conv3_2/conv1/weights/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv3_2/conv1/weights"
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv3_2/conv1/weights/Initializer/truncated_normal"
  op: "Add"
  input: "monodepth2_model/encoder/conv3_2/conv1/weights/Initializer/truncated_normal/mul"
  input: "monodepth2_model/encoder/conv3_2/conv1/weights/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv3_2/conv1/weights"
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv3_2/conv1/weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv3_2/conv1/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 128
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv3_2/conv1/weights/Assign"
  op: "Assign"
  input: "monodepth2_model/encoder/conv3_2/conv1/weights"
  input: "monodepth2_model/encoder/conv3_2/conv1/weights/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv3_2/conv1/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv3_2/conv1/weights/read"
  op: "Identity"
  input: "monodepth2_model/encoder/conv3_2/conv1/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv3_2/conv1/weights"
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv3_2/conv1/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv3_2/conv1/Conv2D"
  op: "Conv2D"
  input: "monodepth2_model/encoder/conv3_1/relu2"
  input: "monodepth2_model/encoder/conv3_2/conv1/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv3_2/BatchNorm/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv3_2/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv3_2/BatchNorm/gamma"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv3_2/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv3_2/BatchNorm/gamma/Assign"
  op: "Assign"
  input: "monodepth2_model/encoder/conv3_2/BatchNorm/gamma"
  input: "monodepth2_model/encoder/conv3_2/BatchNorm/gamma/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv3_2/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv3_2/BatchNorm/gamma/read"
  op: "Identity"
  input: "monodepth2_model/encoder/conv3_2/BatchNorm/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv3_2/BatchNorm/gamma"
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv3_2/BatchNorm/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv3_2/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv3_2/BatchNorm/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv3_2/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv3_2/BatchNorm/beta/Assign"
  op: "Assign"
  input: "monodepth2_model/encoder/conv3_2/BatchNorm/beta"
  input: "monodepth2_model/encoder/conv3_2/BatchNorm/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv3_2/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv3_2/BatchNorm/beta/read"
  op: "Identity"
  input: "monodepth2_model/encoder/conv3_2/BatchNorm/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv3_2/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv3_2/BatchNorm/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv3_2/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv3_2/BatchNorm/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv3_2/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv3_2/BatchNorm/moving_mean/Assign"
  op: "Assign"
  input: "monodepth2_model/encoder/conv3_2/BatchNorm/moving_mean"
  input: "monodepth2_model/encoder/conv3_2/BatchNorm/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv3_2/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv3_2/BatchNorm/moving_mean/read"
  op: "Identity"
  input: "monodepth2_model/encoder/conv3_2/BatchNorm/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv3_2/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv3_2/BatchNorm/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv3_2/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv3_2/BatchNorm/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv3_2/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv3_2/BatchNorm/moving_variance/Assign"
  op: "Assign"
  input: "monodepth2_model/encoder/conv3_2/BatchNorm/moving_variance"
  input: "monodepth2_model/encoder/conv3_2/BatchNorm/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv3_2/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv3_2/BatchNorm/moving_variance/read"
  op: "Identity"
  input: "monodepth2_model/encoder/conv3_2/BatchNorm/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv3_2/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv3_2/BatchNorm/FusedBatchNormV3"
  op: "FusedBatchNormV3"
  input: "monodepth2_model/encoder/conv3_2/conv1/Conv2D"
  input: "monodepth2_model/encoder/conv3_2/BatchNorm/gamma/read"
  input: "monodepth2_model/encoder/conv3_2/BatchNorm/beta/read"
  input: "monodepth2_model/encoder/conv3_2/BatchNorm/moving_mean/read"
  input: "monodepth2_model/encoder/conv3_2/BatchNorm/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "U"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 1.0009999641624745e-05
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv3_2/BatchNorm/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.949999988079071
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv3_2/relu1"
  op: "Relu"
  input: "monodepth2_model/encoder/conv3_2/BatchNorm/FusedBatchNormV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv3_2/conv2/weights/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv3_2/conv2/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\200\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv3_2/conv2/weights/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv3_2/conv2/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv3_2/conv2/weights/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv3_2/conv2/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.04736863449215889
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv3_2/conv2/weights/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "monodepth2_model/encoder/conv3_2/conv2/weights/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv3_2/conv2/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv3_2/conv2/weights/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "monodepth2_model/encoder/conv3_2/conv2/weights/Initializer/truncated_normal/TruncatedNormal"
  input: "monodepth2_model/encoder/conv3_2/conv2/weights/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv3_2/conv2/weights"
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv3_2/conv2/weights/Initializer/truncated_normal"
  op: "Add"
  input: "monodepth2_model/encoder/conv3_2/conv2/weights/Initializer/truncated_normal/mul"
  input: "monodepth2_model/encoder/conv3_2/conv2/weights/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv3_2/conv2/weights"
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv3_2/conv2/weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv3_2/conv2/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 128
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv3_2/conv2/weights/Assign"
  op: "Assign"
  input: "monodepth2_model/encoder/conv3_2/conv2/weights"
  input: "monodepth2_model/encoder/conv3_2/conv2/weights/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv3_2/conv2/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv3_2/conv2/weights/read"
  op: "Identity"
  input: "monodepth2_model/encoder/conv3_2/conv2/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv3_2/conv2/weights"
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv3_2/conv2/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv3_2/conv2/Conv2D"
  op: "Conv2D"
  input: "monodepth2_model/encoder/conv3_2/relu1"
  input: "monodepth2_model/encoder/conv3_2/conv2/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv3_2/BatchNorm_1/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv3_2/BatchNorm_1/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv3_2/BatchNorm_1/gamma"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv3_2/BatchNorm_1/gamma"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv3_2/BatchNorm_1/gamma/Assign"
  op: "Assign"
  input: "monodepth2_model/encoder/conv3_2/BatchNorm_1/gamma"
  input: "monodepth2_model/encoder/conv3_2/BatchNorm_1/gamma/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv3_2/BatchNorm_1/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv3_2/BatchNorm_1/gamma/read"
  op: "Identity"
  input: "monodepth2_model/encoder/conv3_2/BatchNorm_1/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv3_2/BatchNorm_1/gamma"
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv3_2/BatchNorm_1/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv3_2/BatchNorm_1/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv3_2/BatchNorm_1/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv3_2/BatchNorm_1/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv3_2/BatchNorm_1/beta/Assign"
  op: "Assign"
  input: "monodepth2_model/encoder/conv3_2/BatchNorm_1/beta"
  input: "monodepth2_model/encoder/conv3_2/BatchNorm_1/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv3_2/BatchNorm_1/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv3_2/BatchNorm_1/beta/read"
  op: "Identity"
  input: "monodepth2_model/encoder/conv3_2/BatchNorm_1/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv3_2/BatchNorm_1/beta"
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv3_2/BatchNorm_1/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv3_2/BatchNorm_1/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv3_2/BatchNorm_1/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv3_2/BatchNorm_1/moving_mean"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv3_2/BatchNorm_1/moving_mean/Assign"
  op: "Assign"
  input: "monodepth2_model/encoder/conv3_2/BatchNorm_1/moving_mean"
  input: "monodepth2_model/encoder/conv3_2/BatchNorm_1/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv3_2/BatchNorm_1/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv3_2/BatchNorm_1/moving_mean/read"
  op: "Identity"
  input: "monodepth2_model/encoder/conv3_2/BatchNorm_1/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv3_2/BatchNorm_1/moving_mean"
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv3_2/BatchNorm_1/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv3_2/BatchNorm_1/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv3_2/BatchNorm_1/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv3_2/BatchNorm_1/moving_variance"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv3_2/BatchNorm_1/moving_variance/Assign"
  op: "Assign"
  input: "monodepth2_model/encoder/conv3_2/BatchNorm_1/moving_variance"
  input: "monodepth2_model/encoder/conv3_2/BatchNorm_1/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv3_2/BatchNorm_1/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv3_2/BatchNorm_1/moving_variance/read"
  op: "Identity"
  input: "monodepth2_model/encoder/conv3_2/BatchNorm_1/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv3_2/BatchNorm_1/moving_variance"
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv3_2/BatchNorm_1/FusedBatchNormV3"
  op: "FusedBatchNormV3"
  input: "monodepth2_model/encoder/conv3_2/conv2/Conv2D"
  input: "monodepth2_model/encoder/conv3_2/BatchNorm_1/gamma/read"
  input: "monodepth2_model/encoder/conv3_2/BatchNorm_1/beta/read"
  input: "monodepth2_model/encoder/conv3_2/BatchNorm_1/moving_mean/read"
  input: "monodepth2_model/encoder/conv3_2/BatchNorm_1/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "U"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 1.0009999641624745e-05
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv3_2/BatchNorm_1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.949999988079071
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv3_2/add"
  op: "AddV2"
  input: "monodepth2_model/encoder/conv3_2/BatchNorm_1/FusedBatchNormV3"
  input: "monodepth2_model/encoder/conv3_1/relu2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv3_2/relu2"
  op: "Relu"
  input: "monodepth2_model/encoder/conv3_2/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv4_1/shortcut/weights/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv4_1/shortcut/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\200\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv4_1/shortcut/weights/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv4_1/shortcut/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv4_1/shortcut/weights/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv4_1/shortcut/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.14210590720176697
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv4_1/shortcut/weights/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "monodepth2_model/encoder/conv4_1/shortcut/weights/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv4_1/shortcut/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv4_1/shortcut/weights/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "monodepth2_model/encoder/conv4_1/shortcut/weights/Initializer/truncated_normal/TruncatedNormal"
  input: "monodepth2_model/encoder/conv4_1/shortcut/weights/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv4_1/shortcut/weights"
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv4_1/shortcut/weights/Initializer/truncated_normal"
  op: "Add"
  input: "monodepth2_model/encoder/conv4_1/shortcut/weights/Initializer/truncated_normal/mul"
  input: "monodepth2_model/encoder/conv4_1/shortcut/weights/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv4_1/shortcut/weights"
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv4_1/shortcut/weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv4_1/shortcut/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 128
        }
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv4_1/shortcut/weights/Assign"
  op: "Assign"
  input: "monodepth2_model/encoder/conv4_1/shortcut/weights"
  input: "monodepth2_model/encoder/conv4_1/shortcut/weights/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv4_1/shortcut/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv4_1/shortcut/weights/read"
  op: "Identity"
  input: "monodepth2_model/encoder/conv4_1/shortcut/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv4_1/shortcut/weights"
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv4_1/shortcut/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv4_1/shortcut/Conv2D"
  op: "Conv2D"
  input: "monodepth2_model/encoder/conv3_2/relu2"
  input: "monodepth2_model/encoder/conv4_1/shortcut/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv4_1/conv1/weights/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv4_1/conv1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\200\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv4_1/conv1/weights/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv4_1/conv1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv4_1/conv1/weights/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv4_1/conv1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.04736863449215889
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv4_1/conv1/weights/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "monodepth2_model/encoder/conv4_1/conv1/weights/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv4_1/conv1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv4_1/conv1/weights/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "monodepth2_model/encoder/conv4_1/conv1/weights/Initializer/truncated_normal/TruncatedNormal"
  input: "monodepth2_model/encoder/conv4_1/conv1/weights/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv4_1/conv1/weights"
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv4_1/conv1/weights/Initializer/truncated_normal"
  op: "Add"
  input: "monodepth2_model/encoder/conv4_1/conv1/weights/Initializer/truncated_normal/mul"
  input: "monodepth2_model/encoder/conv4_1/conv1/weights/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv4_1/conv1/weights"
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv4_1/conv1/weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv4_1/conv1/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 128
        }
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv4_1/conv1/weights/Assign"
  op: "Assign"
  input: "monodepth2_model/encoder/conv4_1/conv1/weights"
  input: "monodepth2_model/encoder/conv4_1/conv1/weights/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv4_1/conv1/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv4_1/conv1/weights/read"
  op: "Identity"
  input: "monodepth2_model/encoder/conv4_1/conv1/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv4_1/conv1/weights"
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv4_1/conv1/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv4_1/conv1/Conv2D"
  op: "Conv2D"
  input: "monodepth2_model/encoder/conv3_2/relu2"
  input: "monodepth2_model/encoder/conv4_1/conv1/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv4_1/BatchNorm/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv4_1/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv4_1/BatchNorm/gamma"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv4_1/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv4_1/BatchNorm/gamma/Assign"
  op: "Assign"
  input: "monodepth2_model/encoder/conv4_1/BatchNorm/gamma"
  input: "monodepth2_model/encoder/conv4_1/BatchNorm/gamma/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv4_1/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv4_1/BatchNorm/gamma/read"
  op: "Identity"
  input: "monodepth2_model/encoder/conv4_1/BatchNorm/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv4_1/BatchNorm/gamma"
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv4_1/BatchNorm/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv4_1/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv4_1/BatchNorm/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv4_1/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv4_1/BatchNorm/beta/Assign"
  op: "Assign"
  input: "monodepth2_model/encoder/conv4_1/BatchNorm/beta"
  input: "monodepth2_model/encoder/conv4_1/BatchNorm/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv4_1/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv4_1/BatchNorm/beta/read"
  op: "Identity"
  input: "monodepth2_model/encoder/conv4_1/BatchNorm/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv4_1/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv4_1/BatchNorm/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv4_1/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv4_1/BatchNorm/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv4_1/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv4_1/BatchNorm/moving_mean/Assign"
  op: "Assign"
  input: "monodepth2_model/encoder/conv4_1/BatchNorm/moving_mean"
  input: "monodepth2_model/encoder/conv4_1/BatchNorm/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv4_1/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv4_1/BatchNorm/moving_mean/read"
  op: "Identity"
  input: "monodepth2_model/encoder/conv4_1/BatchNorm/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv4_1/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv4_1/BatchNorm/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv4_1/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv4_1/BatchNorm/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv4_1/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv4_1/BatchNorm/moving_variance/Assign"
  op: "Assign"
  input: "monodepth2_model/encoder/conv4_1/BatchNorm/moving_variance"
  input: "monodepth2_model/encoder/conv4_1/BatchNorm/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv4_1/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv4_1/BatchNorm/moving_variance/read"
  op: "Identity"
  input: "monodepth2_model/encoder/conv4_1/BatchNorm/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv4_1/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv4_1/BatchNorm/FusedBatchNormV3"
  op: "FusedBatchNormV3"
  input: "monodepth2_model/encoder/conv4_1/conv1/Conv2D"
  input: "monodepth2_model/encoder/conv4_1/BatchNorm/gamma/read"
  input: "monodepth2_model/encoder/conv4_1/BatchNorm/beta/read"
  input: "monodepth2_model/encoder/conv4_1/BatchNorm/moving_mean/read"
  input: "monodepth2_model/encoder/conv4_1/BatchNorm/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "U"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 1.0009999641624745e-05
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv4_1/BatchNorm/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.949999988079071
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv4_1/relu1"
  op: "Relu"
  input: "monodepth2_model/encoder/conv4_1/BatchNorm/FusedBatchNormV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv4_1/conv2/weights/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv4_1/conv2/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\000\001\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv4_1/conv2/weights/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv4_1/conv2/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv4_1/conv2/weights/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv4_1/conv2/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.03349468111991882
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv4_1/conv2/weights/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "monodepth2_model/encoder/conv4_1/conv2/weights/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv4_1/conv2/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv4_1/conv2/weights/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "monodepth2_model/encoder/conv4_1/conv2/weights/Initializer/truncated_normal/TruncatedNormal"
  input: "monodepth2_model/encoder/conv4_1/conv2/weights/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv4_1/conv2/weights"
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv4_1/conv2/weights/Initializer/truncated_normal"
  op: "Add"
  input: "monodepth2_model/encoder/conv4_1/conv2/weights/Initializer/truncated_normal/mul"
  input: "monodepth2_model/encoder/conv4_1/conv2/weights/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv4_1/conv2/weights"
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv4_1/conv2/weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv4_1/conv2/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 256
        }
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv4_1/conv2/weights/Assign"
  op: "Assign"
  input: "monodepth2_model/encoder/conv4_1/conv2/weights"
  input: "monodepth2_model/encoder/conv4_1/conv2/weights/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv4_1/conv2/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv4_1/conv2/weights/read"
  op: "Identity"
  input: "monodepth2_model/encoder/conv4_1/conv2/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv4_1/conv2/weights"
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv4_1/conv2/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv4_1/conv2/Conv2D"
  op: "Conv2D"
  input: "monodepth2_model/encoder/conv4_1/relu1"
  input: "monodepth2_model/encoder/conv4_1/conv2/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv4_1/BatchNorm_1/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv4_1/BatchNorm_1/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv4_1/BatchNorm_1/gamma"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv4_1/BatchNorm_1/gamma"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv4_1/BatchNorm_1/gamma/Assign"
  op: "Assign"
  input: "monodepth2_model/encoder/conv4_1/BatchNorm_1/gamma"
  input: "monodepth2_model/encoder/conv4_1/BatchNorm_1/gamma/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv4_1/BatchNorm_1/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv4_1/BatchNorm_1/gamma/read"
  op: "Identity"
  input: "monodepth2_model/encoder/conv4_1/BatchNorm_1/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv4_1/BatchNorm_1/gamma"
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv4_1/BatchNorm_1/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv4_1/BatchNorm_1/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv4_1/BatchNorm_1/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv4_1/BatchNorm_1/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv4_1/BatchNorm_1/beta/Assign"
  op: "Assign"
  input: "monodepth2_model/encoder/conv4_1/BatchNorm_1/beta"
  input: "monodepth2_model/encoder/conv4_1/BatchNorm_1/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv4_1/BatchNorm_1/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv4_1/BatchNorm_1/beta/read"
  op: "Identity"
  input: "monodepth2_model/encoder/conv4_1/BatchNorm_1/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv4_1/BatchNorm_1/beta"
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv4_1/BatchNorm_1/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv4_1/BatchNorm_1/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv4_1/BatchNorm_1/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv4_1/BatchNorm_1/moving_mean"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv4_1/BatchNorm_1/moving_mean/Assign"
  op: "Assign"
  input: "monodepth2_model/encoder/conv4_1/BatchNorm_1/moving_mean"
  input: "monodepth2_model/encoder/conv4_1/BatchNorm_1/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv4_1/BatchNorm_1/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv4_1/BatchNorm_1/moving_mean/read"
  op: "Identity"
  input: "monodepth2_model/encoder/conv4_1/BatchNorm_1/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv4_1/BatchNorm_1/moving_mean"
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv4_1/BatchNorm_1/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv4_1/BatchNorm_1/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv4_1/BatchNorm_1/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv4_1/BatchNorm_1/moving_variance"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv4_1/BatchNorm_1/moving_variance/Assign"
  op: "Assign"
  input: "monodepth2_model/encoder/conv4_1/BatchNorm_1/moving_variance"
  input: "monodepth2_model/encoder/conv4_1/BatchNorm_1/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv4_1/BatchNorm_1/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv4_1/BatchNorm_1/moving_variance/read"
  op: "Identity"
  input: "monodepth2_model/encoder/conv4_1/BatchNorm_1/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv4_1/BatchNorm_1/moving_variance"
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv4_1/BatchNorm_1/FusedBatchNormV3"
  op: "FusedBatchNormV3"
  input: "monodepth2_model/encoder/conv4_1/conv2/Conv2D"
  input: "monodepth2_model/encoder/conv4_1/BatchNorm_1/gamma/read"
  input: "monodepth2_model/encoder/conv4_1/BatchNorm_1/beta/read"
  input: "monodepth2_model/encoder/conv4_1/BatchNorm_1/moving_mean/read"
  input: "monodepth2_model/encoder/conv4_1/BatchNorm_1/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "U"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 1.0009999641624745e-05
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv4_1/BatchNorm_1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.949999988079071
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv4_1/add"
  op: "AddV2"
  input: "monodepth2_model/encoder/conv4_1/BatchNorm_1/FusedBatchNormV3"
  input: "monodepth2_model/encoder/conv4_1/shortcut/Conv2D"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv4_1/relu2"
  op: "Relu"
  input: "monodepth2_model/encoder/conv4_1/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv4_2/conv1/weights/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv4_2/conv1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\000\001\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv4_2/conv1/weights/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv4_2/conv1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv4_2/conv1/weights/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv4_2/conv1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.03349468111991882
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv4_2/conv1/weights/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "monodepth2_model/encoder/conv4_2/conv1/weights/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv4_2/conv1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv4_2/conv1/weights/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "monodepth2_model/encoder/conv4_2/conv1/weights/Initializer/truncated_normal/TruncatedNormal"
  input: "monodepth2_model/encoder/conv4_2/conv1/weights/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv4_2/conv1/weights"
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv4_2/conv1/weights/Initializer/truncated_normal"
  op: "Add"
  input: "monodepth2_model/encoder/conv4_2/conv1/weights/Initializer/truncated_normal/mul"
  input: "monodepth2_model/encoder/conv4_2/conv1/weights/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv4_2/conv1/weights"
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv4_2/conv1/weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv4_2/conv1/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 256
        }
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv4_2/conv1/weights/Assign"
  op: "Assign"
  input: "monodepth2_model/encoder/conv4_2/conv1/weights"
  input: "monodepth2_model/encoder/conv4_2/conv1/weights/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv4_2/conv1/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv4_2/conv1/weights/read"
  op: "Identity"
  input: "monodepth2_model/encoder/conv4_2/conv1/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv4_2/conv1/weights"
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv4_2/conv1/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv4_2/conv1/Conv2D"
  op: "Conv2D"
  input: "monodepth2_model/encoder/conv4_1/relu2"
  input: "monodepth2_model/encoder/conv4_2/conv1/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv4_2/BatchNorm/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv4_2/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv4_2/BatchNorm/gamma"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv4_2/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv4_2/BatchNorm/gamma/Assign"
  op: "Assign"
  input: "monodepth2_model/encoder/conv4_2/BatchNorm/gamma"
  input: "monodepth2_model/encoder/conv4_2/BatchNorm/gamma/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv4_2/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv4_2/BatchNorm/gamma/read"
  op: "Identity"
  input: "monodepth2_model/encoder/conv4_2/BatchNorm/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv4_2/BatchNorm/gamma"
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv4_2/BatchNorm/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv4_2/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv4_2/BatchNorm/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv4_2/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv4_2/BatchNorm/beta/Assign"
  op: "Assign"
  input: "monodepth2_model/encoder/conv4_2/BatchNorm/beta"
  input: "monodepth2_model/encoder/conv4_2/BatchNorm/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv4_2/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv4_2/BatchNorm/beta/read"
  op: "Identity"
  input: "monodepth2_model/encoder/conv4_2/BatchNorm/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv4_2/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv4_2/BatchNorm/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv4_2/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv4_2/BatchNorm/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv4_2/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv4_2/BatchNorm/moving_mean/Assign"
  op: "Assign"
  input: "monodepth2_model/encoder/conv4_2/BatchNorm/moving_mean"
  input: "monodepth2_model/encoder/conv4_2/BatchNorm/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv4_2/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv4_2/BatchNorm/moving_mean/read"
  op: "Identity"
  input: "monodepth2_model/encoder/conv4_2/BatchNorm/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv4_2/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv4_2/BatchNorm/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv4_2/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv4_2/BatchNorm/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv4_2/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv4_2/BatchNorm/moving_variance/Assign"
  op: "Assign"
  input: "monodepth2_model/encoder/conv4_2/BatchNorm/moving_variance"
  input: "monodepth2_model/encoder/conv4_2/BatchNorm/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv4_2/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv4_2/BatchNorm/moving_variance/read"
  op: "Identity"
  input: "monodepth2_model/encoder/conv4_2/BatchNorm/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv4_2/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv4_2/BatchNorm/FusedBatchNormV3"
  op: "FusedBatchNormV3"
  input: "monodepth2_model/encoder/conv4_2/conv1/Conv2D"
  input: "monodepth2_model/encoder/conv4_2/BatchNorm/gamma/read"
  input: "monodepth2_model/encoder/conv4_2/BatchNorm/beta/read"
  input: "monodepth2_model/encoder/conv4_2/BatchNorm/moving_mean/read"
  input: "monodepth2_model/encoder/conv4_2/BatchNorm/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "U"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 1.0009999641624745e-05
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv4_2/BatchNorm/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.949999988079071
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv4_2/relu1"
  op: "Relu"
  input: "monodepth2_model/encoder/conv4_2/BatchNorm/FusedBatchNormV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv4_2/conv2/weights/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv4_2/conv2/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\000\001\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv4_2/conv2/weights/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv4_2/conv2/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv4_2/conv2/weights/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv4_2/conv2/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.03349468111991882
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv4_2/conv2/weights/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "monodepth2_model/encoder/conv4_2/conv2/weights/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv4_2/conv2/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv4_2/conv2/weights/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "monodepth2_model/encoder/conv4_2/conv2/weights/Initializer/truncated_normal/TruncatedNormal"
  input: "monodepth2_model/encoder/conv4_2/conv2/weights/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv4_2/conv2/weights"
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv4_2/conv2/weights/Initializer/truncated_normal"
  op: "Add"
  input: "monodepth2_model/encoder/conv4_2/conv2/weights/Initializer/truncated_normal/mul"
  input: "monodepth2_model/encoder/conv4_2/conv2/weights/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv4_2/conv2/weights"
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv4_2/conv2/weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv4_2/conv2/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 256
        }
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv4_2/conv2/weights/Assign"
  op: "Assign"
  input: "monodepth2_model/encoder/conv4_2/conv2/weights"
  input: "monodepth2_model/encoder/conv4_2/conv2/weights/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv4_2/conv2/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv4_2/conv2/weights/read"
  op: "Identity"
  input: "monodepth2_model/encoder/conv4_2/conv2/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv4_2/conv2/weights"
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv4_2/conv2/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv4_2/conv2/Conv2D"
  op: "Conv2D"
  input: "monodepth2_model/encoder/conv4_2/relu1"
  input: "monodepth2_model/encoder/conv4_2/conv2/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv4_2/BatchNorm_1/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv4_2/BatchNorm_1/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv4_2/BatchNorm_1/gamma"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv4_2/BatchNorm_1/gamma"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv4_2/BatchNorm_1/gamma/Assign"
  op: "Assign"
  input: "monodepth2_model/encoder/conv4_2/BatchNorm_1/gamma"
  input: "monodepth2_model/encoder/conv4_2/BatchNorm_1/gamma/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv4_2/BatchNorm_1/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv4_2/BatchNorm_1/gamma/read"
  op: "Identity"
  input: "monodepth2_model/encoder/conv4_2/BatchNorm_1/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv4_2/BatchNorm_1/gamma"
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv4_2/BatchNorm_1/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv4_2/BatchNorm_1/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv4_2/BatchNorm_1/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv4_2/BatchNorm_1/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv4_2/BatchNorm_1/beta/Assign"
  op: "Assign"
  input: "monodepth2_model/encoder/conv4_2/BatchNorm_1/beta"
  input: "monodepth2_model/encoder/conv4_2/BatchNorm_1/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv4_2/BatchNorm_1/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv4_2/BatchNorm_1/beta/read"
  op: "Identity"
  input: "monodepth2_model/encoder/conv4_2/BatchNorm_1/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv4_2/BatchNorm_1/beta"
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv4_2/BatchNorm_1/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv4_2/BatchNorm_1/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv4_2/BatchNorm_1/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv4_2/BatchNorm_1/moving_mean"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv4_2/BatchNorm_1/moving_mean/Assign"
  op: "Assign"
  input: "monodepth2_model/encoder/conv4_2/BatchNorm_1/moving_mean"
  input: "monodepth2_model/encoder/conv4_2/BatchNorm_1/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv4_2/BatchNorm_1/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv4_2/BatchNorm_1/moving_mean/read"
  op: "Identity"
  input: "monodepth2_model/encoder/conv4_2/BatchNorm_1/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv4_2/BatchNorm_1/moving_mean"
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv4_2/BatchNorm_1/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv4_2/BatchNorm_1/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv4_2/BatchNorm_1/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv4_2/BatchNorm_1/moving_variance"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv4_2/BatchNorm_1/moving_variance/Assign"
  op: "Assign"
  input: "monodepth2_model/encoder/conv4_2/BatchNorm_1/moving_variance"
  input: "monodepth2_model/encoder/conv4_2/BatchNorm_1/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv4_2/BatchNorm_1/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv4_2/BatchNorm_1/moving_variance/read"
  op: "Identity"
  input: "monodepth2_model/encoder/conv4_2/BatchNorm_1/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv4_2/BatchNorm_1/moving_variance"
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv4_2/BatchNorm_1/FusedBatchNormV3"
  op: "FusedBatchNormV3"
  input: "monodepth2_model/encoder/conv4_2/conv2/Conv2D"
  input: "monodepth2_model/encoder/conv4_2/BatchNorm_1/gamma/read"
  input: "monodepth2_model/encoder/conv4_2/BatchNorm_1/beta/read"
  input: "monodepth2_model/encoder/conv4_2/BatchNorm_1/moving_mean/read"
  input: "monodepth2_model/encoder/conv4_2/BatchNorm_1/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "U"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 1.0009999641624745e-05
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv4_2/BatchNorm_1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.949999988079071
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv4_2/add"
  op: "AddV2"
  input: "monodepth2_model/encoder/conv4_2/BatchNorm_1/FusedBatchNormV3"
  input: "monodepth2_model/encoder/conv4_1/relu2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv4_2/relu2"
  op: "Relu"
  input: "monodepth2_model/encoder/conv4_2/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv5_1/shortcut/weights/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv5_1/shortcut/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\000\001\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv5_1/shortcut/weights/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv5_1/shortcut/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv5_1/shortcut/weights/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv5_1/shortcut/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.10048405081033707
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv5_1/shortcut/weights/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "monodepth2_model/encoder/conv5_1/shortcut/weights/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv5_1/shortcut/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv5_1/shortcut/weights/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "monodepth2_model/encoder/conv5_1/shortcut/weights/Initializer/truncated_normal/TruncatedNormal"
  input: "monodepth2_model/encoder/conv5_1/shortcut/weights/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv5_1/shortcut/weights"
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv5_1/shortcut/weights/Initializer/truncated_normal"
  op: "Add"
  input: "monodepth2_model/encoder/conv5_1/shortcut/weights/Initializer/truncated_normal/mul"
  input: "monodepth2_model/encoder/conv5_1/shortcut/weights/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv5_1/shortcut/weights"
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv5_1/shortcut/weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv5_1/shortcut/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 256
        }
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv5_1/shortcut/weights/Assign"
  op: "Assign"
  input: "monodepth2_model/encoder/conv5_1/shortcut/weights"
  input: "monodepth2_model/encoder/conv5_1/shortcut/weights/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv5_1/shortcut/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv5_1/shortcut/weights/read"
  op: "Identity"
  input: "monodepth2_model/encoder/conv5_1/shortcut/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv5_1/shortcut/weights"
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv5_1/shortcut/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv5_1/shortcut/Conv2D"
  op: "Conv2D"
  input: "monodepth2_model/encoder/conv4_2/relu2"
  input: "monodepth2_model/encoder/conv5_1/shortcut/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv5_1/conv1/weights/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv5_1/conv1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\000\001\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv5_1/conv1/weights/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv5_1/conv1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv5_1/conv1/weights/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv5_1/conv1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.03349468111991882
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv5_1/conv1/weights/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "monodepth2_model/encoder/conv5_1/conv1/weights/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv5_1/conv1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv5_1/conv1/weights/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "monodepth2_model/encoder/conv5_1/conv1/weights/Initializer/truncated_normal/TruncatedNormal"
  input: "monodepth2_model/encoder/conv5_1/conv1/weights/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv5_1/conv1/weights"
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv5_1/conv1/weights/Initializer/truncated_normal"
  op: "Add"
  input: "monodepth2_model/encoder/conv5_1/conv1/weights/Initializer/truncated_normal/mul"
  input: "monodepth2_model/encoder/conv5_1/conv1/weights/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv5_1/conv1/weights"
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv5_1/conv1/weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv5_1/conv1/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 256
        }
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv5_1/conv1/weights/Assign"
  op: "Assign"
  input: "monodepth2_model/encoder/conv5_1/conv1/weights"
  input: "monodepth2_model/encoder/conv5_1/conv1/weights/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv5_1/conv1/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv5_1/conv1/weights/read"
  op: "Identity"
  input: "monodepth2_model/encoder/conv5_1/conv1/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv5_1/conv1/weights"
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv5_1/conv1/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv5_1/conv1/Conv2D"
  op: "Conv2D"
  input: "monodepth2_model/encoder/conv4_2/relu2"
  input: "monodepth2_model/encoder/conv5_1/conv1/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv5_1/BatchNorm/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv5_1/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv5_1/BatchNorm/gamma"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv5_1/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv5_1/BatchNorm/gamma/Assign"
  op: "Assign"
  input: "monodepth2_model/encoder/conv5_1/BatchNorm/gamma"
  input: "monodepth2_model/encoder/conv5_1/BatchNorm/gamma/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv5_1/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv5_1/BatchNorm/gamma/read"
  op: "Identity"
  input: "monodepth2_model/encoder/conv5_1/BatchNorm/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv5_1/BatchNorm/gamma"
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv5_1/BatchNorm/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv5_1/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv5_1/BatchNorm/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv5_1/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv5_1/BatchNorm/beta/Assign"
  op: "Assign"
  input: "monodepth2_model/encoder/conv5_1/BatchNorm/beta"
  input: "monodepth2_model/encoder/conv5_1/BatchNorm/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv5_1/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv5_1/BatchNorm/beta/read"
  op: "Identity"
  input: "monodepth2_model/encoder/conv5_1/BatchNorm/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv5_1/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv5_1/BatchNorm/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv5_1/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv5_1/BatchNorm/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv5_1/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv5_1/BatchNorm/moving_mean/Assign"
  op: "Assign"
  input: "monodepth2_model/encoder/conv5_1/BatchNorm/moving_mean"
  input: "monodepth2_model/encoder/conv5_1/BatchNorm/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv5_1/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv5_1/BatchNorm/moving_mean/read"
  op: "Identity"
  input: "monodepth2_model/encoder/conv5_1/BatchNorm/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv5_1/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv5_1/BatchNorm/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv5_1/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv5_1/BatchNorm/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv5_1/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv5_1/BatchNorm/moving_variance/Assign"
  op: "Assign"
  input: "monodepth2_model/encoder/conv5_1/BatchNorm/moving_variance"
  input: "monodepth2_model/encoder/conv5_1/BatchNorm/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv5_1/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv5_1/BatchNorm/moving_variance/read"
  op: "Identity"
  input: "monodepth2_model/encoder/conv5_1/BatchNorm/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv5_1/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv5_1/BatchNorm/FusedBatchNormV3"
  op: "FusedBatchNormV3"
  input: "monodepth2_model/encoder/conv5_1/conv1/Conv2D"
  input: "monodepth2_model/encoder/conv5_1/BatchNorm/gamma/read"
  input: "monodepth2_model/encoder/conv5_1/BatchNorm/beta/read"
  input: "monodepth2_model/encoder/conv5_1/BatchNorm/moving_mean/read"
  input: "monodepth2_model/encoder/conv5_1/BatchNorm/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "U"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 1.0009999641624745e-05
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv5_1/BatchNorm/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.949999988079071
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv5_1/relu1"
  op: "Relu"
  input: "monodepth2_model/encoder/conv5_1/BatchNorm/FusedBatchNormV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv5_1/conv2/weights/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv5_1/conv2/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\000\002\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv5_1/conv2/weights/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv5_1/conv2/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv5_1/conv2/weights/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv5_1/conv2/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.023684317246079445
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv5_1/conv2/weights/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "monodepth2_model/encoder/conv5_1/conv2/weights/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv5_1/conv2/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv5_1/conv2/weights/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "monodepth2_model/encoder/conv5_1/conv2/weights/Initializer/truncated_normal/TruncatedNormal"
  input: "monodepth2_model/encoder/conv5_1/conv2/weights/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv5_1/conv2/weights"
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv5_1/conv2/weights/Initializer/truncated_normal"
  op: "Add"
  input: "monodepth2_model/encoder/conv5_1/conv2/weights/Initializer/truncated_normal/mul"
  input: "monodepth2_model/encoder/conv5_1/conv2/weights/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv5_1/conv2/weights"
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv5_1/conv2/weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv5_1/conv2/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 512
        }
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv5_1/conv2/weights/Assign"
  op: "Assign"
  input: "monodepth2_model/encoder/conv5_1/conv2/weights"
  input: "monodepth2_model/encoder/conv5_1/conv2/weights/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv5_1/conv2/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv5_1/conv2/weights/read"
  op: "Identity"
  input: "monodepth2_model/encoder/conv5_1/conv2/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv5_1/conv2/weights"
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv5_1/conv2/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv5_1/conv2/Conv2D"
  op: "Conv2D"
  input: "monodepth2_model/encoder/conv5_1/relu1"
  input: "monodepth2_model/encoder/conv5_1/conv2/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv5_1/BatchNorm_1/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv5_1/BatchNorm_1/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv5_1/BatchNorm_1/gamma"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv5_1/BatchNorm_1/gamma"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv5_1/BatchNorm_1/gamma/Assign"
  op: "Assign"
  input: "monodepth2_model/encoder/conv5_1/BatchNorm_1/gamma"
  input: "monodepth2_model/encoder/conv5_1/BatchNorm_1/gamma/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv5_1/BatchNorm_1/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv5_1/BatchNorm_1/gamma/read"
  op: "Identity"
  input: "monodepth2_model/encoder/conv5_1/BatchNorm_1/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv5_1/BatchNorm_1/gamma"
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv5_1/BatchNorm_1/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv5_1/BatchNorm_1/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv5_1/BatchNorm_1/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv5_1/BatchNorm_1/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv5_1/BatchNorm_1/beta/Assign"
  op: "Assign"
  input: "monodepth2_model/encoder/conv5_1/BatchNorm_1/beta"
  input: "monodepth2_model/encoder/conv5_1/BatchNorm_1/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv5_1/BatchNorm_1/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv5_1/BatchNorm_1/beta/read"
  op: "Identity"
  input: "monodepth2_model/encoder/conv5_1/BatchNorm_1/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv5_1/BatchNorm_1/beta"
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv5_1/BatchNorm_1/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv5_1/BatchNorm_1/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv5_1/BatchNorm_1/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv5_1/BatchNorm_1/moving_mean"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv5_1/BatchNorm_1/moving_mean/Assign"
  op: "Assign"
  input: "monodepth2_model/encoder/conv5_1/BatchNorm_1/moving_mean"
  input: "monodepth2_model/encoder/conv5_1/BatchNorm_1/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv5_1/BatchNorm_1/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv5_1/BatchNorm_1/moving_mean/read"
  op: "Identity"
  input: "monodepth2_model/encoder/conv5_1/BatchNorm_1/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv5_1/BatchNorm_1/moving_mean"
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv5_1/BatchNorm_1/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv5_1/BatchNorm_1/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv5_1/BatchNorm_1/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv5_1/BatchNorm_1/moving_variance"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv5_1/BatchNorm_1/moving_variance/Assign"
  op: "Assign"
  input: "monodepth2_model/encoder/conv5_1/BatchNorm_1/moving_variance"
  input: "monodepth2_model/encoder/conv5_1/BatchNorm_1/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv5_1/BatchNorm_1/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv5_1/BatchNorm_1/moving_variance/read"
  op: "Identity"
  input: "monodepth2_model/encoder/conv5_1/BatchNorm_1/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv5_1/BatchNorm_1/moving_variance"
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv5_1/BatchNorm_1/FusedBatchNormV3"
  op: "FusedBatchNormV3"
  input: "monodepth2_model/encoder/conv5_1/conv2/Conv2D"
  input: "monodepth2_model/encoder/conv5_1/BatchNorm_1/gamma/read"
  input: "monodepth2_model/encoder/conv5_1/BatchNorm_1/beta/read"
  input: "monodepth2_model/encoder/conv5_1/BatchNorm_1/moving_mean/read"
  input: "monodepth2_model/encoder/conv5_1/BatchNorm_1/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "U"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 1.0009999641624745e-05
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv5_1/BatchNorm_1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.949999988079071
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv5_1/add"
  op: "AddV2"
  input: "monodepth2_model/encoder/conv5_1/BatchNorm_1/FusedBatchNormV3"
  input: "monodepth2_model/encoder/conv5_1/shortcut/Conv2D"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv5_1/relu2"
  op: "Relu"
  input: "monodepth2_model/encoder/conv5_1/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv5_2/conv1/weights/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv5_2/conv1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\000\002\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv5_2/conv1/weights/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv5_2/conv1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv5_2/conv1/weights/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv5_2/conv1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.023684317246079445
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv5_2/conv1/weights/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "monodepth2_model/encoder/conv5_2/conv1/weights/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv5_2/conv1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv5_2/conv1/weights/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "monodepth2_model/encoder/conv5_2/conv1/weights/Initializer/truncated_normal/TruncatedNormal"
  input: "monodepth2_model/encoder/conv5_2/conv1/weights/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv5_2/conv1/weights"
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv5_2/conv1/weights/Initializer/truncated_normal"
  op: "Add"
  input: "monodepth2_model/encoder/conv5_2/conv1/weights/Initializer/truncated_normal/mul"
  input: "monodepth2_model/encoder/conv5_2/conv1/weights/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv5_2/conv1/weights"
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv5_2/conv1/weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv5_2/conv1/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 512
        }
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv5_2/conv1/weights/Assign"
  op: "Assign"
  input: "monodepth2_model/encoder/conv5_2/conv1/weights"
  input: "monodepth2_model/encoder/conv5_2/conv1/weights/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv5_2/conv1/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv5_2/conv1/weights/read"
  op: "Identity"
  input: "monodepth2_model/encoder/conv5_2/conv1/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv5_2/conv1/weights"
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv5_2/conv1/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv5_2/conv1/Conv2D"
  op: "Conv2D"
  input: "monodepth2_model/encoder/conv5_1/relu2"
  input: "monodepth2_model/encoder/conv5_2/conv1/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv5_2/BatchNorm/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv5_2/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv5_2/BatchNorm/gamma"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv5_2/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv5_2/BatchNorm/gamma/Assign"
  op: "Assign"
  input: "monodepth2_model/encoder/conv5_2/BatchNorm/gamma"
  input: "monodepth2_model/encoder/conv5_2/BatchNorm/gamma/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv5_2/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv5_2/BatchNorm/gamma/read"
  op: "Identity"
  input: "monodepth2_model/encoder/conv5_2/BatchNorm/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv5_2/BatchNorm/gamma"
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv5_2/BatchNorm/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv5_2/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv5_2/BatchNorm/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv5_2/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv5_2/BatchNorm/beta/Assign"
  op: "Assign"
  input: "monodepth2_model/encoder/conv5_2/BatchNorm/beta"
  input: "monodepth2_model/encoder/conv5_2/BatchNorm/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv5_2/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv5_2/BatchNorm/beta/read"
  op: "Identity"
  input: "monodepth2_model/encoder/conv5_2/BatchNorm/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv5_2/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv5_2/BatchNorm/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv5_2/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv5_2/BatchNorm/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv5_2/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv5_2/BatchNorm/moving_mean/Assign"
  op: "Assign"
  input: "monodepth2_model/encoder/conv5_2/BatchNorm/moving_mean"
  input: "monodepth2_model/encoder/conv5_2/BatchNorm/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv5_2/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv5_2/BatchNorm/moving_mean/read"
  op: "Identity"
  input: "monodepth2_model/encoder/conv5_2/BatchNorm/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv5_2/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv5_2/BatchNorm/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv5_2/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv5_2/BatchNorm/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv5_2/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv5_2/BatchNorm/moving_variance/Assign"
  op: "Assign"
  input: "monodepth2_model/encoder/conv5_2/BatchNorm/moving_variance"
  input: "monodepth2_model/encoder/conv5_2/BatchNorm/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv5_2/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv5_2/BatchNorm/moving_variance/read"
  op: "Identity"
  input: "monodepth2_model/encoder/conv5_2/BatchNorm/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv5_2/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv5_2/BatchNorm/FusedBatchNormV3"
  op: "FusedBatchNormV3"
  input: "monodepth2_model/encoder/conv5_2/conv1/Conv2D"
  input: "monodepth2_model/encoder/conv5_2/BatchNorm/gamma/read"
  input: "monodepth2_model/encoder/conv5_2/BatchNorm/beta/read"
  input: "monodepth2_model/encoder/conv5_2/BatchNorm/moving_mean/read"
  input: "monodepth2_model/encoder/conv5_2/BatchNorm/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "U"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 1.0009999641624745e-05
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv5_2/BatchNorm/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.949999988079071
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv5_2/relu1"
  op: "Relu"
  input: "monodepth2_model/encoder/conv5_2/BatchNorm/FusedBatchNormV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv5_2/conv2/weights/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv5_2/conv2/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\000\002\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv5_2/conv2/weights/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv5_2/conv2/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv5_2/conv2/weights/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv5_2/conv2/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.023684317246079445
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv5_2/conv2/weights/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "monodepth2_model/encoder/conv5_2/conv2/weights/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv5_2/conv2/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv5_2/conv2/weights/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "monodepth2_model/encoder/conv5_2/conv2/weights/Initializer/truncated_normal/TruncatedNormal"
  input: "monodepth2_model/encoder/conv5_2/conv2/weights/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv5_2/conv2/weights"
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv5_2/conv2/weights/Initializer/truncated_normal"
  op: "Add"
  input: "monodepth2_model/encoder/conv5_2/conv2/weights/Initializer/truncated_normal/mul"
  input: "monodepth2_model/encoder/conv5_2/conv2/weights/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv5_2/conv2/weights"
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv5_2/conv2/weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv5_2/conv2/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 512
        }
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv5_2/conv2/weights/Assign"
  op: "Assign"
  input: "monodepth2_model/encoder/conv5_2/conv2/weights"
  input: "monodepth2_model/encoder/conv5_2/conv2/weights/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv5_2/conv2/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv5_2/conv2/weights/read"
  op: "Identity"
  input: "monodepth2_model/encoder/conv5_2/conv2/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv5_2/conv2/weights"
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv5_2/conv2/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv5_2/conv2/Conv2D"
  op: "Conv2D"
  input: "monodepth2_model/encoder/conv5_2/relu1"
  input: "monodepth2_model/encoder/conv5_2/conv2/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv5_2/BatchNorm_1/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv5_2/BatchNorm_1/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv5_2/BatchNorm_1/gamma"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv5_2/BatchNorm_1/gamma"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv5_2/BatchNorm_1/gamma/Assign"
  op: "Assign"
  input: "monodepth2_model/encoder/conv5_2/BatchNorm_1/gamma"
  input: "monodepth2_model/encoder/conv5_2/BatchNorm_1/gamma/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv5_2/BatchNorm_1/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv5_2/BatchNorm_1/gamma/read"
  op: "Identity"
  input: "monodepth2_model/encoder/conv5_2/BatchNorm_1/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv5_2/BatchNorm_1/gamma"
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv5_2/BatchNorm_1/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv5_2/BatchNorm_1/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv5_2/BatchNorm_1/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv5_2/BatchNorm_1/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv5_2/BatchNorm_1/beta/Assign"
  op: "Assign"
  input: "monodepth2_model/encoder/conv5_2/BatchNorm_1/beta"
  input: "monodepth2_model/encoder/conv5_2/BatchNorm_1/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv5_2/BatchNorm_1/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv5_2/BatchNorm_1/beta/read"
  op: "Identity"
  input: "monodepth2_model/encoder/conv5_2/BatchNorm_1/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv5_2/BatchNorm_1/beta"
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv5_2/BatchNorm_1/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv5_2/BatchNorm_1/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv5_2/BatchNorm_1/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv5_2/BatchNorm_1/moving_mean"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv5_2/BatchNorm_1/moving_mean/Assign"
  op: "Assign"
  input: "monodepth2_model/encoder/conv5_2/BatchNorm_1/moving_mean"
  input: "monodepth2_model/encoder/conv5_2/BatchNorm_1/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv5_2/BatchNorm_1/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv5_2/BatchNorm_1/moving_mean/read"
  op: "Identity"
  input: "monodepth2_model/encoder/conv5_2/BatchNorm_1/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv5_2/BatchNorm_1/moving_mean"
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv5_2/BatchNorm_1/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv5_2/BatchNorm_1/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv5_2/BatchNorm_1/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv5_2/BatchNorm_1/moving_variance"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv5_2/BatchNorm_1/moving_variance/Assign"
  op: "Assign"
  input: "monodepth2_model/encoder/conv5_2/BatchNorm_1/moving_variance"
  input: "monodepth2_model/encoder/conv5_2/BatchNorm_1/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv5_2/BatchNorm_1/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv5_2/BatchNorm_1/moving_variance/read"
  op: "Identity"
  input: "monodepth2_model/encoder/conv5_2/BatchNorm_1/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv5_2/BatchNorm_1/moving_variance"
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv5_2/BatchNorm_1/FusedBatchNormV3"
  op: "FusedBatchNormV3"
  input: "monodepth2_model/encoder/conv5_2/conv2/Conv2D"
  input: "monodepth2_model/encoder/conv5_2/BatchNorm_1/gamma/read"
  input: "monodepth2_model/encoder/conv5_2/BatchNorm_1/beta/read"
  input: "monodepth2_model/encoder/conv5_2/BatchNorm_1/moving_mean/read"
  input: "monodepth2_model/encoder/conv5_2/BatchNorm_1/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "U"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 1.0009999641624745e-05
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv5_2/BatchNorm_1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.949999988079071
      }
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv5_2/add"
  op: "AddV2"
  input: "monodepth2_model/encoder/conv5_2/BatchNorm_1/FusedBatchNormV3"
  input: "monodepth2_model/encoder/conv5_1/relu2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "monodepth2_model/encoder/conv5_2/relu2"
  op: "Relu"
  input: "monodepth2_model/encoder/conv5_2/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/MirrorPad/paddings"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/MirrorPad"
  op: "MirrorPad"
  input: "monodepth2_model/encoder/conv5_2/relu2"
  input: "monodepth2_model/depth_decoder/MirrorPad/paddings"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tpaddings"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "mode"
    value {
      s: "REFLECT"
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/iconv5/weights/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/depth_decoder/iconv5/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\000\002\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/iconv5/weights/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/depth_decoder/iconv5/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/iconv5/weights/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/depth_decoder/iconv5/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0023753654677420855
      }
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/iconv5/weights/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "monodepth2_model/depth_decoder/iconv5/weights/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/depth_decoder/iconv5/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/iconv5/weights/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "monodepth2_model/depth_decoder/iconv5/weights/Initializer/truncated_normal/TruncatedNormal"
  input: "monodepth2_model/depth_decoder/iconv5/weights/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/depth_decoder/iconv5/weights"
      }
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/iconv5/weights/Initializer/truncated_normal"
  op: "Add"
  input: "monodepth2_model/depth_decoder/iconv5/weights/Initializer/truncated_normal/mul"
  input: "monodepth2_model/depth_decoder/iconv5/weights/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/depth_decoder/iconv5/weights"
      }
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/iconv5/weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/depth_decoder/iconv5/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 512
        }
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/iconv5/weights/Assign"
  op: "Assign"
  input: "monodepth2_model/depth_decoder/iconv5/weights"
  input: "monodepth2_model/depth_decoder/iconv5/weights/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/depth_decoder/iconv5/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/iconv5/weights/read"
  op: "Identity"
  input: "monodepth2_model/depth_decoder/iconv5/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/depth_decoder/iconv5/weights"
      }
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/iconv5/biases/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/depth_decoder/iconv5/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/iconv5/biases"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/depth_decoder/iconv5/biases"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/iconv5/biases/Assign"
  op: "Assign"
  input: "monodepth2_model/depth_decoder/iconv5/biases"
  input: "monodepth2_model/depth_decoder/iconv5/biases/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/depth_decoder/iconv5/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/iconv5/biases/read"
  op: "Identity"
  input: "monodepth2_model/depth_decoder/iconv5/biases"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/depth_decoder/iconv5/biases"
      }
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/iconv5/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/iconv5/Conv2D"
  op: "Conv2D"
  input: "monodepth2_model/depth_decoder/MirrorPad"
  input: "monodepth2_model/depth_decoder/iconv5/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/iconv5/BiasAdd"
  op: "BiasAdd"
  input: "monodepth2_model/depth_decoder/iconv5/Conv2D"
  input: "monodepth2_model/depth_decoder/iconv5/biases/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/iconv5/Elu"
  op: "Elu"
  input: "monodepth2_model/depth_decoder/iconv5/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/ResizeNearestNeighbor/size"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\014\000\000\000(\000\000\000"
      }
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/ResizeNearestNeighbor"
  op: "ResizeNearestNeighbor"
  input: "monodepth2_model/depth_decoder/iconv5/Elu"
  input: "monodepth2_model/depth_decoder/ResizeNearestNeighbor/size"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "align_corners"
    value {
      b: false
    }
  }
  attr {
    key: "half_pixel_centers"
    value {
      b: false
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/concat"
  op: "ConcatV2"
  input: "monodepth2_model/depth_decoder/ResizeNearestNeighbor"
  input: "monodepth2_model/encoder/conv4_2/relu2"
  input: "monodepth2_model/depth_decoder/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/MirrorPad_1/paddings"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/MirrorPad_1"
  op: "MirrorPad"
  input: "monodepth2_model/depth_decoder/concat"
  input: "monodepth2_model/depth_decoder/MirrorPad_1/paddings"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tpaddings"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "mode"
    value {
      s: "REFLECT"
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/upconv5/weights/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/depth_decoder/upconv5/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\000\002\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/upconv5/weights/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/depth_decoder/upconv5/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/upconv5/weights/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/depth_decoder/upconv5/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0023753654677420855
      }
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/upconv5/weights/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "monodepth2_model/depth_decoder/upconv5/weights/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/depth_decoder/upconv5/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/upconv5/weights/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "monodepth2_model/depth_decoder/upconv5/weights/Initializer/truncated_normal/TruncatedNormal"
  input: "monodepth2_model/depth_decoder/upconv5/weights/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/depth_decoder/upconv5/weights"
      }
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/upconv5/weights/Initializer/truncated_normal"
  op: "Add"
  input: "monodepth2_model/depth_decoder/upconv5/weights/Initializer/truncated_normal/mul"
  input: "monodepth2_model/depth_decoder/upconv5/weights/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/depth_decoder/upconv5/weights"
      }
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/upconv5/weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/depth_decoder/upconv5/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 512
        }
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/upconv5/weights/Assign"
  op: "Assign"
  input: "monodepth2_model/depth_decoder/upconv5/weights"
  input: "monodepth2_model/depth_decoder/upconv5/weights/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/depth_decoder/upconv5/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/upconv5/weights/read"
  op: "Identity"
  input: "monodepth2_model/depth_decoder/upconv5/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/depth_decoder/upconv5/weights"
      }
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/upconv5/biases/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/depth_decoder/upconv5/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/upconv5/biases"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/depth_decoder/upconv5/biases"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/upconv5/biases/Assign"
  op: "Assign"
  input: "monodepth2_model/depth_decoder/upconv5/biases"
  input: "monodepth2_model/depth_decoder/upconv5/biases/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/depth_decoder/upconv5/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/upconv5/biases/read"
  op: "Identity"
  input: "monodepth2_model/depth_decoder/upconv5/biases"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/depth_decoder/upconv5/biases"
      }
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/upconv5/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/upconv5/Conv2D"
  op: "Conv2D"
  input: "monodepth2_model/depth_decoder/MirrorPad_1"
  input: "monodepth2_model/depth_decoder/upconv5/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/upconv5/BiasAdd"
  op: "BiasAdd"
  input: "monodepth2_model/depth_decoder/upconv5/Conv2D"
  input: "monodepth2_model/depth_decoder/upconv5/biases/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/upconv5/Elu"
  op: "Elu"
  input: "monodepth2_model/depth_decoder/upconv5/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/MirrorPad_2/paddings"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/MirrorPad_2"
  op: "MirrorPad"
  input: "monodepth2_model/depth_decoder/upconv5/Elu"
  input: "monodepth2_model/depth_decoder/MirrorPad_2/paddings"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tpaddings"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "mode"
    value {
      s: "REFLECT"
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/iconv4/weights/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/depth_decoder/iconv4/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\000\001\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/iconv4/weights/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/depth_decoder/iconv4/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/iconv4/weights/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/depth_decoder/iconv4/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0033592740073800087
      }
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/iconv4/weights/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "monodepth2_model/depth_decoder/iconv4/weights/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/depth_decoder/iconv4/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/iconv4/weights/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "monodepth2_model/depth_decoder/iconv4/weights/Initializer/truncated_normal/TruncatedNormal"
  input: "monodepth2_model/depth_decoder/iconv4/weights/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/depth_decoder/iconv4/weights"
      }
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/iconv4/weights/Initializer/truncated_normal"
  op: "Add"
  input: "monodepth2_model/depth_decoder/iconv4/weights/Initializer/truncated_normal/mul"
  input: "monodepth2_model/depth_decoder/iconv4/weights/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/depth_decoder/iconv4/weights"
      }
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/iconv4/weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/depth_decoder/iconv4/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 256
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/iconv4/weights/Assign"
  op: "Assign"
  input: "monodepth2_model/depth_decoder/iconv4/weights"
  input: "monodepth2_model/depth_decoder/iconv4/weights/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/depth_decoder/iconv4/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/iconv4/weights/read"
  op: "Identity"
  input: "monodepth2_model/depth_decoder/iconv4/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/depth_decoder/iconv4/weights"
      }
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/iconv4/biases/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/depth_decoder/iconv4/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/iconv4/biases"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/depth_decoder/iconv4/biases"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/iconv4/biases/Assign"
  op: "Assign"
  input: "monodepth2_model/depth_decoder/iconv4/biases"
  input: "monodepth2_model/depth_decoder/iconv4/biases/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/depth_decoder/iconv4/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/iconv4/biases/read"
  op: "Identity"
  input: "monodepth2_model/depth_decoder/iconv4/biases"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/depth_decoder/iconv4/biases"
      }
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/iconv4/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/iconv4/Conv2D"
  op: "Conv2D"
  input: "monodepth2_model/depth_decoder/MirrorPad_2"
  input: "monodepth2_model/depth_decoder/iconv4/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/iconv4/BiasAdd"
  op: "BiasAdd"
  input: "monodepth2_model/depth_decoder/iconv4/Conv2D"
  input: "monodepth2_model/depth_decoder/iconv4/biases/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/iconv4/Elu"
  op: "Elu"
  input: "monodepth2_model/depth_decoder/iconv4/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/ResizeNearestNeighbor_1/size"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\030\000\000\000P\000\000\000"
      }
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/ResizeNearestNeighbor_1"
  op: "ResizeNearestNeighbor"
  input: "monodepth2_model/depth_decoder/iconv4/Elu"
  input: "monodepth2_model/depth_decoder/ResizeNearestNeighbor_1/size"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "align_corners"
    value {
      b: false
    }
  }
  attr {
    key: "half_pixel_centers"
    value {
      b: false
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/concat_1/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/concat_1"
  op: "ConcatV2"
  input: "monodepth2_model/depth_decoder/ResizeNearestNeighbor_1"
  input: "monodepth2_model/encoder/conv3_2/relu2"
  input: "monodepth2_model/depth_decoder/concat_1/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/MirrorPad_3/paddings"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/MirrorPad_3"
  op: "MirrorPad"
  input: "monodepth2_model/depth_decoder/concat_1"
  input: "monodepth2_model/depth_decoder/MirrorPad_3/paddings"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tpaddings"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "mode"
    value {
      s: "REFLECT"
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/upconv4/weights/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/depth_decoder/upconv4/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\000\001\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/upconv4/weights/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/depth_decoder/upconv4/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/upconv4/weights/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/depth_decoder/upconv4/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0033592740073800087
      }
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/upconv4/weights/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "monodepth2_model/depth_decoder/upconv4/weights/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/depth_decoder/upconv4/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/upconv4/weights/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "monodepth2_model/depth_decoder/upconv4/weights/Initializer/truncated_normal/TruncatedNormal"
  input: "monodepth2_model/depth_decoder/upconv4/weights/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/depth_decoder/upconv4/weights"
      }
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/upconv4/weights/Initializer/truncated_normal"
  op: "Add"
  input: "monodepth2_model/depth_decoder/upconv4/weights/Initializer/truncated_normal/mul"
  input: "monodepth2_model/depth_decoder/upconv4/weights/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/depth_decoder/upconv4/weights"
      }
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/upconv4/weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/depth_decoder/upconv4/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 256
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/upconv4/weights/Assign"
  op: "Assign"
  input: "monodepth2_model/depth_decoder/upconv4/weights"
  input: "monodepth2_model/depth_decoder/upconv4/weights/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/depth_decoder/upconv4/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/upconv4/weights/read"
  op: "Identity"
  input: "monodepth2_model/depth_decoder/upconv4/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/depth_decoder/upconv4/weights"
      }
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/upconv4/biases/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/depth_decoder/upconv4/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/upconv4/biases"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/depth_decoder/upconv4/biases"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/upconv4/biases/Assign"
  op: "Assign"
  input: "monodepth2_model/depth_decoder/upconv4/biases"
  input: "monodepth2_model/depth_decoder/upconv4/biases/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/depth_decoder/upconv4/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/upconv4/biases/read"
  op: "Identity"
  input: "monodepth2_model/depth_decoder/upconv4/biases"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/depth_decoder/upconv4/biases"
      }
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/upconv4/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/upconv4/Conv2D"
  op: "Conv2D"
  input: "monodepth2_model/depth_decoder/MirrorPad_3"
  input: "monodepth2_model/depth_decoder/upconv4/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/upconv4/BiasAdd"
  op: "BiasAdd"
  input: "monodepth2_model/depth_decoder/upconv4/Conv2D"
  input: "monodepth2_model/depth_decoder/upconv4/biases/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/upconv4/Elu"
  op: "Elu"
  input: "monodepth2_model/depth_decoder/upconv4/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/MirrorPad_4/paddings"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/MirrorPad_4"
  op: "MirrorPad"
  input: "monodepth2_model/depth_decoder/upconv4/Elu"
  input: "monodepth2_model/depth_decoder/MirrorPad_4/paddings"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tpaddings"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "mode"
    value {
      s: "REFLECT"
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/disp4/weights/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/depth_decoder/disp4/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\200\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/disp4/weights/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/depth_decoder/disp4/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/disp4/weights/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/depth_decoder/disp4/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.03800584748387337
      }
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/disp4/weights/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "monodepth2_model/depth_decoder/disp4/weights/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/depth_decoder/disp4/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/disp4/weights/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "monodepth2_model/depth_decoder/disp4/weights/Initializer/truncated_normal/TruncatedNormal"
  input: "monodepth2_model/depth_decoder/disp4/weights/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/depth_decoder/disp4/weights"
      }
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/disp4/weights/Initializer/truncated_normal"
  op: "Add"
  input: "monodepth2_model/depth_decoder/disp4/weights/Initializer/truncated_normal/mul"
  input: "monodepth2_model/depth_decoder/disp4/weights/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/depth_decoder/disp4/weights"
      }
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/disp4/weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/depth_decoder/disp4/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 128
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/disp4/weights/Assign"
  op: "Assign"
  input: "monodepth2_model/depth_decoder/disp4/weights"
  input: "monodepth2_model/depth_decoder/disp4/weights/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/depth_decoder/disp4/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/disp4/weights/read"
  op: "Identity"
  input: "monodepth2_model/depth_decoder/disp4/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/depth_decoder/disp4/weights"
      }
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/disp4/biases/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/depth_decoder/disp4/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/disp4/biases"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/depth_decoder/disp4/biases"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/disp4/biases/Assign"
  op: "Assign"
  input: "monodepth2_model/depth_decoder/disp4/biases"
  input: "monodepth2_model/depth_decoder/disp4/biases/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/depth_decoder/disp4/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/disp4/biases/read"
  op: "Identity"
  input: "monodepth2_model/depth_decoder/disp4/biases"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/depth_decoder/disp4/biases"
      }
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/disp4/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/disp4/Conv2D"
  op: "Conv2D"
  input: "monodepth2_model/depth_decoder/MirrorPad_4"
  input: "monodepth2_model/depth_decoder/disp4/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/disp4/BiasAdd"
  op: "BiasAdd"
  input: "monodepth2_model/depth_decoder/disp4/Conv2D"
  input: "monodepth2_model/depth_decoder/disp4/biases/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/disp4/Sigmoid"
  op: "Sigmoid"
  input: "monodepth2_model/depth_decoder/disp4/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/MirrorPad_5/paddings"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/MirrorPad_5"
  op: "MirrorPad"
  input: "monodepth2_model/depth_decoder/upconv4/Elu"
  input: "monodepth2_model/depth_decoder/MirrorPad_5/paddings"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tpaddings"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "mode"
    value {
      s: "REFLECT"
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/iconv3/weights/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/depth_decoder/iconv3/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\200\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/iconv3/weights/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/depth_decoder/iconv3/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/iconv3/weights/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/depth_decoder/iconv3/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.004750730935484171
      }
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/iconv3/weights/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "monodepth2_model/depth_decoder/iconv3/weights/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/depth_decoder/iconv3/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/iconv3/weights/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "monodepth2_model/depth_decoder/iconv3/weights/Initializer/truncated_normal/TruncatedNormal"
  input: "monodepth2_model/depth_decoder/iconv3/weights/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/depth_decoder/iconv3/weights"
      }
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/iconv3/weights/Initializer/truncated_normal"
  op: "Add"
  input: "monodepth2_model/depth_decoder/iconv3/weights/Initializer/truncated_normal/mul"
  input: "monodepth2_model/depth_decoder/iconv3/weights/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/depth_decoder/iconv3/weights"
      }
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/iconv3/weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/depth_decoder/iconv3/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 128
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/iconv3/weights/Assign"
  op: "Assign"
  input: "monodepth2_model/depth_decoder/iconv3/weights"
  input: "monodepth2_model/depth_decoder/iconv3/weights/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/depth_decoder/iconv3/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/iconv3/weights/read"
  op: "Identity"
  input: "monodepth2_model/depth_decoder/iconv3/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/depth_decoder/iconv3/weights"
      }
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/iconv3/biases/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/depth_decoder/iconv3/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/iconv3/biases"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/depth_decoder/iconv3/biases"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/iconv3/biases/Assign"
  op: "Assign"
  input: "monodepth2_model/depth_decoder/iconv3/biases"
  input: "monodepth2_model/depth_decoder/iconv3/biases/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/depth_decoder/iconv3/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/iconv3/biases/read"
  op: "Identity"
  input: "monodepth2_model/depth_decoder/iconv3/biases"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/depth_decoder/iconv3/biases"
      }
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/iconv3/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/iconv3/Conv2D"
  op: "Conv2D"
  input: "monodepth2_model/depth_decoder/MirrorPad_5"
  input: "monodepth2_model/depth_decoder/iconv3/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/iconv3/BiasAdd"
  op: "BiasAdd"
  input: "monodepth2_model/depth_decoder/iconv3/Conv2D"
  input: "monodepth2_model/depth_decoder/iconv3/biases/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/iconv3/Elu"
  op: "Elu"
  input: "monodepth2_model/depth_decoder/iconv3/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/ResizeNearestNeighbor_2/size"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "0\000\000\000\240\000\000\000"
      }
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/ResizeNearestNeighbor_2"
  op: "ResizeNearestNeighbor"
  input: "monodepth2_model/depth_decoder/iconv3/Elu"
  input: "monodepth2_model/depth_decoder/ResizeNearestNeighbor_2/size"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "align_corners"
    value {
      b: false
    }
  }
  attr {
    key: "half_pixel_centers"
    value {
      b: false
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/concat_2/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/concat_2"
  op: "ConcatV2"
  input: "monodepth2_model/depth_decoder/ResizeNearestNeighbor_2"
  input: "monodepth2_model/encoder/conv2_2/relu2"
  input: "monodepth2_model/depth_decoder/concat_2/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/MirrorPad_6/paddings"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/MirrorPad_6"
  op: "MirrorPad"
  input: "monodepth2_model/depth_decoder/concat_2"
  input: "monodepth2_model/depth_decoder/MirrorPad_6/paddings"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tpaddings"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "mode"
    value {
      s: "REFLECT"
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/upconv3/weights/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/depth_decoder/upconv3/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\200\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/upconv3/weights/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/depth_decoder/upconv3/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/upconv3/weights/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/depth_decoder/upconv3/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.004750730935484171
      }
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/upconv3/weights/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "monodepth2_model/depth_decoder/upconv3/weights/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/depth_decoder/upconv3/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/upconv3/weights/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "monodepth2_model/depth_decoder/upconv3/weights/Initializer/truncated_normal/TruncatedNormal"
  input: "monodepth2_model/depth_decoder/upconv3/weights/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/depth_decoder/upconv3/weights"
      }
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/upconv3/weights/Initializer/truncated_normal"
  op: "Add"
  input: "monodepth2_model/depth_decoder/upconv3/weights/Initializer/truncated_normal/mul"
  input: "monodepth2_model/depth_decoder/upconv3/weights/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/depth_decoder/upconv3/weights"
      }
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/upconv3/weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/depth_decoder/upconv3/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 128
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/upconv3/weights/Assign"
  op: "Assign"
  input: "monodepth2_model/depth_decoder/upconv3/weights"
  input: "monodepth2_model/depth_decoder/upconv3/weights/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/depth_decoder/upconv3/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/upconv3/weights/read"
  op: "Identity"
  input: "monodepth2_model/depth_decoder/upconv3/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/depth_decoder/upconv3/weights"
      }
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/upconv3/biases/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/depth_decoder/upconv3/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/upconv3/biases"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/depth_decoder/upconv3/biases"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/upconv3/biases/Assign"
  op: "Assign"
  input: "monodepth2_model/depth_decoder/upconv3/biases"
  input: "monodepth2_model/depth_decoder/upconv3/biases/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/depth_decoder/upconv3/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/upconv3/biases/read"
  op: "Identity"
  input: "monodepth2_model/depth_decoder/upconv3/biases"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/depth_decoder/upconv3/biases"
      }
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/upconv3/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/upconv3/Conv2D"
  op: "Conv2D"
  input: "monodepth2_model/depth_decoder/MirrorPad_6"
  input: "monodepth2_model/depth_decoder/upconv3/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/upconv3/BiasAdd"
  op: "BiasAdd"
  input: "monodepth2_model/depth_decoder/upconv3/Conv2D"
  input: "monodepth2_model/depth_decoder/upconv3/biases/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/upconv3/Elu"
  op: "Elu"
  input: "monodepth2_model/depth_decoder/upconv3/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/MirrorPad_7/paddings"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/MirrorPad_7"
  op: "MirrorPad"
  input: "monodepth2_model/depth_decoder/upconv3/Elu"
  input: "monodepth2_model/depth_decoder/MirrorPad_7/paddings"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tpaddings"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "mode"
    value {
      s: "REFLECT"
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/disp3/weights/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/depth_decoder/disp3/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000@\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/disp3/weights/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/depth_decoder/disp3/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/disp3/weights/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/depth_decoder/disp3/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.03800584748387337
      }
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/disp3/weights/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "monodepth2_model/depth_decoder/disp3/weights/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/depth_decoder/disp3/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/disp3/weights/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "monodepth2_model/depth_decoder/disp3/weights/Initializer/truncated_normal/TruncatedNormal"
  input: "monodepth2_model/depth_decoder/disp3/weights/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/depth_decoder/disp3/weights"
      }
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/disp3/weights/Initializer/truncated_normal"
  op: "Add"
  input: "monodepth2_model/depth_decoder/disp3/weights/Initializer/truncated_normal/mul"
  input: "monodepth2_model/depth_decoder/disp3/weights/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/depth_decoder/disp3/weights"
      }
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/disp3/weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/depth_decoder/disp3/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 64
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/disp3/weights/Assign"
  op: "Assign"
  input: "monodepth2_model/depth_decoder/disp3/weights"
  input: "monodepth2_model/depth_decoder/disp3/weights/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/depth_decoder/disp3/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/disp3/weights/read"
  op: "Identity"
  input: "monodepth2_model/depth_decoder/disp3/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/depth_decoder/disp3/weights"
      }
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/disp3/biases/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/depth_decoder/disp3/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/disp3/biases"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/depth_decoder/disp3/biases"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/disp3/biases/Assign"
  op: "Assign"
  input: "monodepth2_model/depth_decoder/disp3/biases"
  input: "monodepth2_model/depth_decoder/disp3/biases/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/depth_decoder/disp3/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/disp3/biases/read"
  op: "Identity"
  input: "monodepth2_model/depth_decoder/disp3/biases"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/depth_decoder/disp3/biases"
      }
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/disp3/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/disp3/Conv2D"
  op: "Conv2D"
  input: "monodepth2_model/depth_decoder/MirrorPad_7"
  input: "monodepth2_model/depth_decoder/disp3/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/disp3/BiasAdd"
  op: "BiasAdd"
  input: "monodepth2_model/depth_decoder/disp3/Conv2D"
  input: "monodepth2_model/depth_decoder/disp3/biases/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/disp3/Sigmoid"
  op: "Sigmoid"
  input: "monodepth2_model/depth_decoder/disp3/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/MirrorPad_8/paddings"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/MirrorPad_8"
  op: "MirrorPad"
  input: "monodepth2_model/depth_decoder/upconv3/Elu"
  input: "monodepth2_model/depth_decoder/MirrorPad_8/paddings"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tpaddings"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "mode"
    value {
      s: "REFLECT"
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/iconv2/weights/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/depth_decoder/iconv2/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000@\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/iconv2/weights/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/depth_decoder/iconv2/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/iconv2/weights/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/depth_decoder/iconv2/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.006718548014760017
      }
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/iconv2/weights/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "monodepth2_model/depth_decoder/iconv2/weights/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/depth_decoder/iconv2/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/iconv2/weights/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "monodepth2_model/depth_decoder/iconv2/weights/Initializer/truncated_normal/TruncatedNormal"
  input: "monodepth2_model/depth_decoder/iconv2/weights/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/depth_decoder/iconv2/weights"
      }
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/iconv2/weights/Initializer/truncated_normal"
  op: "Add"
  input: "monodepth2_model/depth_decoder/iconv2/weights/Initializer/truncated_normal/mul"
  input: "monodepth2_model/depth_decoder/iconv2/weights/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/depth_decoder/iconv2/weights"
      }
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/iconv2/weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/depth_decoder/iconv2/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 64
        }
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/iconv2/weights/Assign"
  op: "Assign"
  input: "monodepth2_model/depth_decoder/iconv2/weights"
  input: "monodepth2_model/depth_decoder/iconv2/weights/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/depth_decoder/iconv2/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/iconv2/weights/read"
  op: "Identity"
  input: "monodepth2_model/depth_decoder/iconv2/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/depth_decoder/iconv2/weights"
      }
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/iconv2/biases/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/depth_decoder/iconv2/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/iconv2/biases"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/depth_decoder/iconv2/biases"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/iconv2/biases/Assign"
  op: "Assign"
  input: "monodepth2_model/depth_decoder/iconv2/biases"
  input: "monodepth2_model/depth_decoder/iconv2/biases/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/depth_decoder/iconv2/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/iconv2/biases/read"
  op: "Identity"
  input: "monodepth2_model/depth_decoder/iconv2/biases"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/depth_decoder/iconv2/biases"
      }
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/iconv2/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/iconv2/Conv2D"
  op: "Conv2D"
  input: "monodepth2_model/depth_decoder/MirrorPad_8"
  input: "monodepth2_model/depth_decoder/iconv2/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/iconv2/BiasAdd"
  op: "BiasAdd"
  input: "monodepth2_model/depth_decoder/iconv2/Conv2D"
  input: "monodepth2_model/depth_decoder/iconv2/biases/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/iconv2/Elu"
  op: "Elu"
  input: "monodepth2_model/depth_decoder/iconv2/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/ResizeNearestNeighbor_3/size"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "`\000\000\000@\001\000\000"
      }
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/ResizeNearestNeighbor_3"
  op: "ResizeNearestNeighbor"
  input: "monodepth2_model/depth_decoder/iconv2/Elu"
  input: "monodepth2_model/depth_decoder/ResizeNearestNeighbor_3/size"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "align_corners"
    value {
      b: false
    }
  }
  attr {
    key: "half_pixel_centers"
    value {
      b: false
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/concat_3/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/concat_3"
  op: "ConcatV2"
  input: "monodepth2_model/depth_decoder/ResizeNearestNeighbor_3"
  input: "monodepth2_model/encoder/conv1/relu1"
  input: "monodepth2_model/depth_decoder/concat_3/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/MirrorPad_9/paddings"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/MirrorPad_9"
  op: "MirrorPad"
  input: "monodepth2_model/depth_decoder/concat_3"
  input: "monodepth2_model/depth_decoder/MirrorPad_9/paddings"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tpaddings"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "mode"
    value {
      s: "REFLECT"
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/upconv2/weights/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/depth_decoder/upconv2/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000`\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/upconv2/weights/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/depth_decoder/upconv2/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/upconv2/weights/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/depth_decoder/upconv2/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.006718548014760017
      }
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/upconv2/weights/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "monodepth2_model/depth_decoder/upconv2/weights/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/depth_decoder/upconv2/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/upconv2/weights/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "monodepth2_model/depth_decoder/upconv2/weights/Initializer/truncated_normal/TruncatedNormal"
  input: "monodepth2_model/depth_decoder/upconv2/weights/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/depth_decoder/upconv2/weights"
      }
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/upconv2/weights/Initializer/truncated_normal"
  op: "Add"
  input: "monodepth2_model/depth_decoder/upconv2/weights/Initializer/truncated_normal/mul"
  input: "monodepth2_model/depth_decoder/upconv2/weights/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/depth_decoder/upconv2/weights"
      }
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/upconv2/weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/depth_decoder/upconv2/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 96
        }
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/upconv2/weights/Assign"
  op: "Assign"
  input: "monodepth2_model/depth_decoder/upconv2/weights"
  input: "monodepth2_model/depth_decoder/upconv2/weights/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/depth_decoder/upconv2/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/upconv2/weights/read"
  op: "Identity"
  input: "monodepth2_model/depth_decoder/upconv2/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/depth_decoder/upconv2/weights"
      }
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/upconv2/biases/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/depth_decoder/upconv2/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/upconv2/biases"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/depth_decoder/upconv2/biases"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/upconv2/biases/Assign"
  op: "Assign"
  input: "monodepth2_model/depth_decoder/upconv2/biases"
  input: "monodepth2_model/depth_decoder/upconv2/biases/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/depth_decoder/upconv2/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/upconv2/biases/read"
  op: "Identity"
  input: "monodepth2_model/depth_decoder/upconv2/biases"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/depth_decoder/upconv2/biases"
      }
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/upconv2/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/upconv2/Conv2D"
  op: "Conv2D"
  input: "monodepth2_model/depth_decoder/MirrorPad_9"
  input: "monodepth2_model/depth_decoder/upconv2/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/upconv2/BiasAdd"
  op: "BiasAdd"
  input: "monodepth2_model/depth_decoder/upconv2/Conv2D"
  input: "monodepth2_model/depth_decoder/upconv2/biases/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/upconv2/Elu"
  op: "Elu"
  input: "monodepth2_model/depth_decoder/upconv2/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/MirrorPad_10/paddings"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/MirrorPad_10"
  op: "MirrorPad"
  input: "monodepth2_model/depth_decoder/upconv2/Elu"
  input: "monodepth2_model/depth_decoder/MirrorPad_10/paddings"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tpaddings"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "mode"
    value {
      s: "REFLECT"
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/disp2/weights/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/depth_decoder/disp2/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000 \000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/disp2/weights/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/depth_decoder/disp2/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/disp2/weights/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/depth_decoder/disp2/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.03800584748387337
      }
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/disp2/weights/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "monodepth2_model/depth_decoder/disp2/weights/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/depth_decoder/disp2/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/disp2/weights/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "monodepth2_model/depth_decoder/disp2/weights/Initializer/truncated_normal/TruncatedNormal"
  input: "monodepth2_model/depth_decoder/disp2/weights/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/depth_decoder/disp2/weights"
      }
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/disp2/weights/Initializer/truncated_normal"
  op: "Add"
  input: "monodepth2_model/depth_decoder/disp2/weights/Initializer/truncated_normal/mul"
  input: "monodepth2_model/depth_decoder/disp2/weights/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/depth_decoder/disp2/weights"
      }
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/disp2/weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/depth_decoder/disp2/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 32
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/disp2/weights/Assign"
  op: "Assign"
  input: "monodepth2_model/depth_decoder/disp2/weights"
  input: "monodepth2_model/depth_decoder/disp2/weights/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/depth_decoder/disp2/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/disp2/weights/read"
  op: "Identity"
  input: "monodepth2_model/depth_decoder/disp2/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/depth_decoder/disp2/weights"
      }
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/disp2/biases/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/depth_decoder/disp2/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/disp2/biases"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/depth_decoder/disp2/biases"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/disp2/biases/Assign"
  op: "Assign"
  input: "monodepth2_model/depth_decoder/disp2/biases"
  input: "monodepth2_model/depth_decoder/disp2/biases/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/depth_decoder/disp2/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/disp2/biases/read"
  op: "Identity"
  input: "monodepth2_model/depth_decoder/disp2/biases"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/depth_decoder/disp2/biases"
      }
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/disp2/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/disp2/Conv2D"
  op: "Conv2D"
  input: "monodepth2_model/depth_decoder/MirrorPad_10"
  input: "monodepth2_model/depth_decoder/disp2/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/disp2/BiasAdd"
  op: "BiasAdd"
  input: "monodepth2_model/depth_decoder/disp2/Conv2D"
  input: "monodepth2_model/depth_decoder/disp2/biases/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/disp2/Sigmoid"
  op: "Sigmoid"
  input: "monodepth2_model/depth_decoder/disp2/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/MirrorPad_11/paddings"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/MirrorPad_11"
  op: "MirrorPad"
  input: "monodepth2_model/depth_decoder/upconv2/Elu"
  input: "monodepth2_model/depth_decoder/MirrorPad_11/paddings"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tpaddings"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "mode"
    value {
      s: "REFLECT"
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/iconv1/weights/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/depth_decoder/iconv1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000 \000\000\000\020\000\000\000"
      }
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/iconv1/weights/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/depth_decoder/iconv1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/iconv1/weights/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/depth_decoder/iconv1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.009501461870968342
      }
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/iconv1/weights/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "monodepth2_model/depth_decoder/iconv1/weights/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/depth_decoder/iconv1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/iconv1/weights/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "monodepth2_model/depth_decoder/iconv1/weights/Initializer/truncated_normal/TruncatedNormal"
  input: "monodepth2_model/depth_decoder/iconv1/weights/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/depth_decoder/iconv1/weights"
      }
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/iconv1/weights/Initializer/truncated_normal"
  op: "Add"
  input: "monodepth2_model/depth_decoder/iconv1/weights/Initializer/truncated_normal/mul"
  input: "monodepth2_model/depth_decoder/iconv1/weights/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/depth_decoder/iconv1/weights"
      }
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/iconv1/weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/depth_decoder/iconv1/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 32
        }
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/iconv1/weights/Assign"
  op: "Assign"
  input: "monodepth2_model/depth_decoder/iconv1/weights"
  input: "monodepth2_model/depth_decoder/iconv1/weights/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/depth_decoder/iconv1/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/iconv1/weights/read"
  op: "Identity"
  input: "monodepth2_model/depth_decoder/iconv1/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/depth_decoder/iconv1/weights"
      }
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/iconv1/biases/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/depth_decoder/iconv1/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/iconv1/biases"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/depth_decoder/iconv1/biases"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/iconv1/biases/Assign"
  op: "Assign"
  input: "monodepth2_model/depth_decoder/iconv1/biases"
  input: "monodepth2_model/depth_decoder/iconv1/biases/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/depth_decoder/iconv1/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/iconv1/biases/read"
  op: "Identity"
  input: "monodepth2_model/depth_decoder/iconv1/biases"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/depth_decoder/iconv1/biases"
      }
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/iconv1/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/iconv1/Conv2D"
  op: "Conv2D"
  input: "monodepth2_model/depth_decoder/MirrorPad_11"
  input: "monodepth2_model/depth_decoder/iconv1/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/iconv1/BiasAdd"
  op: "BiasAdd"
  input: "monodepth2_model/depth_decoder/iconv1/Conv2D"
  input: "monodepth2_model/depth_decoder/iconv1/biases/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/iconv1/Elu"
  op: "Elu"
  input: "monodepth2_model/depth_decoder/iconv1/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/ResizeNearestNeighbor_4/size"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\300\000\000\000\200\002\000\000"
      }
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/ResizeNearestNeighbor_4"
  op: "ResizeNearestNeighbor"
  input: "monodepth2_model/depth_decoder/iconv1/Elu"
  input: "monodepth2_model/depth_decoder/ResizeNearestNeighbor_4/size"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "align_corners"
    value {
      b: false
    }
  }
  attr {
    key: "half_pixel_centers"
    value {
      b: false
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/MirrorPad_12/paddings"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/MirrorPad_12"
  op: "MirrorPad"
  input: "monodepth2_model/depth_decoder/ResizeNearestNeighbor_4"
  input: "monodepth2_model/depth_decoder/MirrorPad_12/paddings"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tpaddings"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "mode"
    value {
      s: "REFLECT"
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/upconv1/weights/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/depth_decoder/upconv1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\020\000\000\000\020\000\000\000"
      }
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/upconv1/weights/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/depth_decoder/upconv1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/upconv1/weights/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/depth_decoder/upconv1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.009501461870968342
      }
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/upconv1/weights/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "monodepth2_model/depth_decoder/upconv1/weights/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/depth_decoder/upconv1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/upconv1/weights/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "monodepth2_model/depth_decoder/upconv1/weights/Initializer/truncated_normal/TruncatedNormal"
  input: "monodepth2_model/depth_decoder/upconv1/weights/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/depth_decoder/upconv1/weights"
      }
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/upconv1/weights/Initializer/truncated_normal"
  op: "Add"
  input: "monodepth2_model/depth_decoder/upconv1/weights/Initializer/truncated_normal/mul"
  input: "monodepth2_model/depth_decoder/upconv1/weights/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/depth_decoder/upconv1/weights"
      }
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/upconv1/weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/depth_decoder/upconv1/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 16
        }
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/upconv1/weights/Assign"
  op: "Assign"
  input: "monodepth2_model/depth_decoder/upconv1/weights"
  input: "monodepth2_model/depth_decoder/upconv1/weights/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/depth_decoder/upconv1/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/upconv1/weights/read"
  op: "Identity"
  input: "monodepth2_model/depth_decoder/upconv1/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/depth_decoder/upconv1/weights"
      }
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/upconv1/biases/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/depth_decoder/upconv1/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/upconv1/biases"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/depth_decoder/upconv1/biases"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/upconv1/biases/Assign"
  op: "Assign"
  input: "monodepth2_model/depth_decoder/upconv1/biases"
  input: "monodepth2_model/depth_decoder/upconv1/biases/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/depth_decoder/upconv1/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/upconv1/biases/read"
  op: "Identity"
  input: "monodepth2_model/depth_decoder/upconv1/biases"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/depth_decoder/upconv1/biases"
      }
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/upconv1/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/upconv1/Conv2D"
  op: "Conv2D"
  input: "monodepth2_model/depth_decoder/MirrorPad_12"
  input: "monodepth2_model/depth_decoder/upconv1/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/upconv1/BiasAdd"
  op: "BiasAdd"
  input: "monodepth2_model/depth_decoder/upconv1/Conv2D"
  input: "monodepth2_model/depth_decoder/upconv1/biases/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/upconv1/Elu"
  op: "Elu"
  input: "monodepth2_model/depth_decoder/upconv1/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/MirrorPad_13/paddings"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/MirrorPad_13"
  op: "MirrorPad"
  input: "monodepth2_model/depth_decoder/upconv1/Elu"
  input: "monodepth2_model/depth_decoder/MirrorPad_13/paddings"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tpaddings"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "mode"
    value {
      s: "REFLECT"
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/disp1/weights/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/depth_decoder/disp1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\020\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/disp1/weights/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/depth_decoder/disp1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/disp1/weights/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/depth_decoder/disp1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.03800584748387337
      }
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/disp1/weights/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "monodepth2_model/depth_decoder/disp1/weights/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/depth_decoder/disp1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/disp1/weights/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "monodepth2_model/depth_decoder/disp1/weights/Initializer/truncated_normal/TruncatedNormal"
  input: "monodepth2_model/depth_decoder/disp1/weights/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/depth_decoder/disp1/weights"
      }
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/disp1/weights/Initializer/truncated_normal"
  op: "Add"
  input: "monodepth2_model/depth_decoder/disp1/weights/Initializer/truncated_normal/mul"
  input: "monodepth2_model/depth_decoder/disp1/weights/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/depth_decoder/disp1/weights"
      }
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/disp1/weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/depth_decoder/disp1/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 16
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/disp1/weights/Assign"
  op: "Assign"
  input: "monodepth2_model/depth_decoder/disp1/weights"
  input: "monodepth2_model/depth_decoder/disp1/weights/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/depth_decoder/disp1/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/disp1/weights/read"
  op: "Identity"
  input: "monodepth2_model/depth_decoder/disp1/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/depth_decoder/disp1/weights"
      }
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/disp1/biases/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/depth_decoder/disp1/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/disp1/biases"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/depth_decoder/disp1/biases"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/disp1/biases/Assign"
  op: "Assign"
  input: "monodepth2_model/depth_decoder/disp1/biases"
  input: "monodepth2_model/depth_decoder/disp1/biases/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/depth_decoder/disp1/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/disp1/biases/read"
  op: "Identity"
  input: "monodepth2_model/depth_decoder/disp1/biases"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/depth_decoder/disp1/biases"
      }
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/disp1/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/disp1/Conv2D"
  op: "Conv2D"
  input: "monodepth2_model/depth_decoder/MirrorPad_13"
  input: "monodepth2_model/depth_decoder/disp1/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/disp1/BiasAdd"
  op: "BiasAdd"
  input: "monodepth2_model/depth_decoder/disp1/Conv2D"
  input: "monodepth2_model/depth_decoder/disp1/biases/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "monodepth2_model/depth_decoder/disp1/Sigmoid"
  op: "Sigmoid"
  input: "monodepth2_model/depth_decoder/disp1/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "monodepth2_model/ResizeBilinear/size"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\300\000\000\000\200\002\000\000"
      }
    }
  }
}
node {
  name: "monodepth2_model/ResizeBilinear"
  op: "ResizeBilinear"
  input: "monodepth2_model/depth_decoder/disp1/Sigmoid"
  input: "monodepth2_model/ResizeBilinear/size"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "align_corners"
    value {
      b: false
    }
  }
  attr {
    key: "half_pixel_centers"
    value {
      b: false
    }
  }
}
node {
  name: "monodepth2_model/ResizeBilinear_1/size"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\300\000\000\000\200\002\000\000"
      }
    }
  }
}
node {
  name: "monodepth2_model/ResizeBilinear_1"
  op: "ResizeBilinear"
  input: "monodepth2_model/depth_decoder/disp2/Sigmoid"
  input: "monodepth2_model/ResizeBilinear_1/size"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "align_corners"
    value {
      b: false
    }
  }
  attr {
    key: "half_pixel_centers"
    value {
      b: false
    }
  }
}
node {
  name: "monodepth2_model/ResizeBilinear_2/size"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\300\000\000\000\200\002\000\000"
      }
    }
  }
}
node {
  name: "monodepth2_model/ResizeBilinear_2"
  op: "ResizeBilinear"
  input: "monodepth2_model/depth_decoder/disp3/Sigmoid"
  input: "monodepth2_model/ResizeBilinear_2/size"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "align_corners"
    value {
      b: false
    }
  }
  attr {
    key: "half_pixel_centers"
    value {
      b: false
    }
  }
}
node {
  name: "monodepth2_model/ResizeBilinear_3/size"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\300\000\000\000\200\002\000\000"
      }
    }
  }
}
node {
  name: "monodepth2_model/ResizeBilinear_3"
  op: "ResizeBilinear"
  input: "monodepth2_model/depth_decoder/disp4/Sigmoid"
  input: "monodepth2_model/ResizeBilinear_3/size"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "align_corners"
    value {
      b: false
    }
  }
  attr {
    key: "half_pixel_centers"
    value {
      b: false
    }
  }
}
node {
  name: "monodepth2_model/ToFloat/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.009999999776482582
      }
    }
  }
}
node {
  name: "monodepth2_model/ToFloat_1/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.989999771118164
      }
    }
  }
}
node {
  name: "monodepth2_model/mul/y"
  op: "Pack"
  input: "monodepth2_model/ResizeBilinear"
  input: "monodepth2_model/ResizeBilinear_1"
  input: "monodepth2_model/ResizeBilinear_2"
  input: "monodepth2_model/ResizeBilinear_3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "monodepth2_model/mul"
  op: "Mul"
  input: "monodepth2_model/ToFloat_1/x"
  input: "monodepth2_model/mul/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "monodepth2_model/add"
  op: "AddV2"
  input: "monodepth2_model/ToFloat/x"
  input: "monodepth2_model/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "monodepth2_model/ToFloat_2/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "monodepth2_model/truediv"
  op: "RealDiv"
  input: "monodepth2_model/ToFloat_2/x"
  input: "monodepth2_model/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "monodepth2_model/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "monodepth2_model/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "monodepth2_model/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "monodepth2_model/strided_slice"
  op: "StridedSlice"
  input: "monodepth2_model/truediv"
  input: "monodepth2_model/strided_slice/stack"
  input: "monodepth2_model/strided_slice/stack_1"
  input: "monodepth2_model/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "save/filename/input"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "model"
      }
    }
  }
}
node {
  name: "save/filename"
  op: "PlaceholderWithDefault"
  input: "save/filename/input"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
}
node {
  name: "save/Const"
  op: "PlaceholderWithDefault"
  input: "save/filename"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
}
node {
  name: "save/SaveV2/tensor_names"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 116
          }
        }
        string_val: "monodepth2_model/depth_decoder/disp1/biases"
        string_val: "monodepth2_model/depth_decoder/disp1/weights"
        string_val: "monodepth2_model/depth_decoder/disp2/biases"
        string_val: "monodepth2_model/depth_decoder/disp2/weights"
        string_val: "monodepth2_model/depth_decoder/disp3/biases"
        string_val: "monodepth2_model/depth_decoder/disp3/weights"
        string_val: "monodepth2_model/depth_decoder/disp4/biases"
        string_val: "monodepth2_model/depth_decoder/disp4/weights"
        string_val: "monodepth2_model/depth_decoder/iconv1/biases"
        string_val: "monodepth2_model/depth_decoder/iconv1/weights"
        string_val: "monodepth2_model/depth_decoder/iconv2/biases"
        string_val: "monodepth2_model/depth_decoder/iconv2/weights"
        string_val: "monodepth2_model/depth_decoder/iconv3/biases"
        string_val: "monodepth2_model/depth_decoder/iconv3/weights"
        string_val: "monodepth2_model/depth_decoder/iconv4/biases"
        string_val: "monodepth2_model/depth_decoder/iconv4/weights"
        string_val: "monodepth2_model/depth_decoder/iconv5/biases"
        string_val: "monodepth2_model/depth_decoder/iconv5/weights"
        string_val: "monodepth2_model/depth_decoder/upconv1/biases"
        string_val: "monodepth2_model/depth_decoder/upconv1/weights"
        string_val: "monodepth2_model/depth_decoder/upconv2/biases"
        string_val: "monodepth2_model/depth_decoder/upconv2/weights"
        string_val: "monodepth2_model/depth_decoder/upconv3/biases"
        string_val: "monodepth2_model/depth_decoder/upconv3/weights"
        string_val: "monodepth2_model/depth_decoder/upconv4/biases"
        string_val: "monodepth2_model/depth_decoder/upconv4/weights"
        string_val: "monodepth2_model/depth_decoder/upconv5/biases"
        string_val: "monodepth2_model/depth_decoder/upconv5/weights"
        string_val: "monodepth2_model/encoder/conv1/BatchNorm/beta"
        string_val: "monodepth2_model/encoder/conv1/BatchNorm/gamma"
        string_val: "monodepth2_model/encoder/conv1/BatchNorm/moving_mean"
        string_val: "monodepth2_model/encoder/conv1/BatchNorm/moving_variance"
        string_val: "monodepth2_model/encoder/conv1/conv1/weights"
        string_val: "monodepth2_model/encoder/conv2_1/BatchNorm/beta"
        string_val: "monodepth2_model/encoder/conv2_1/BatchNorm/gamma"
        string_val: "monodepth2_model/encoder/conv2_1/BatchNorm/moving_mean"
        string_val: "monodepth2_model/encoder/conv2_1/BatchNorm/moving_variance"
        string_val: "monodepth2_model/encoder/conv2_1/BatchNorm_1/beta"
        string_val: "monodepth2_model/encoder/conv2_1/BatchNorm_1/gamma"
        string_val: "monodepth2_model/encoder/conv2_1/BatchNorm_1/moving_mean"
        string_val: "monodepth2_model/encoder/conv2_1/BatchNorm_1/moving_variance"
        string_val: "monodepth2_model/encoder/conv2_1/conv1/weights"
        string_val: "monodepth2_model/encoder/conv2_1/conv2/weights"
        string_val: "monodepth2_model/encoder/conv2_2/BatchNorm/beta"
        string_val: "monodepth2_model/encoder/conv2_2/BatchNorm/gamma"
        string_val: "monodepth2_model/encoder/conv2_2/BatchNorm/moving_mean"
        string_val: "monodepth2_model/encoder/conv2_2/BatchNorm/moving_variance"
        string_val: "monodepth2_model/encoder/conv2_2/BatchNorm_1/beta"
        string_val: "monodepth2_model/encoder/conv2_2/BatchNorm_1/gamma"
        string_val: "monodepth2_model/encoder/conv2_2/BatchNorm_1/moving_mean"
        string_val: "monodepth2_model/encoder/conv2_2/BatchNorm_1/moving_variance"
        string_val: "monodepth2_model/encoder/conv2_2/conv1/weights"
        string_val: "monodepth2_model/encoder/conv2_2/conv2/weights"
        string_val: "monodepth2_model/encoder/conv3_1/BatchNorm/beta"
        string_val: "monodepth2_model/encoder/conv3_1/BatchNorm/gamma"
        string_val: "monodepth2_model/encoder/conv3_1/BatchNorm/moving_mean"
        string_val: "monodepth2_model/encoder/conv3_1/BatchNorm/moving_variance"
        string_val: "monodepth2_model/encoder/conv3_1/BatchNorm_1/beta"
        string_val: "monodepth2_model/encoder/conv3_1/BatchNorm_1/gamma"
        string_val: "monodepth2_model/encoder/conv3_1/BatchNorm_1/moving_mean"
        string_val: "monodepth2_model/encoder/conv3_1/BatchNorm_1/moving_variance"
        string_val: "monodepth2_model/encoder/conv3_1/conv1/weights"
        string_val: "monodepth2_model/encoder/conv3_1/conv2/weights"
        string_val: "monodepth2_model/encoder/conv3_1/shortcut/weights"
        string_val: "monodepth2_model/encoder/conv3_2/BatchNorm/beta"
        string_val: "monodepth2_model/encoder/conv3_2/BatchNorm/gamma"
        string_val: "monodepth2_model/encoder/conv3_2/BatchNorm/moving_mean"
        string_val: "monodepth2_model/encoder/conv3_2/BatchNorm/moving_variance"
        string_val: "monodepth2_model/encoder/conv3_2/BatchNorm_1/beta"
        string_val: "monodepth2_model/encoder/conv3_2/BatchNorm_1/gamma"
        string_val: "monodepth2_model/encoder/conv3_2/BatchNorm_1/moving_mean"
        string_val: "monodepth2_model/encoder/conv3_2/BatchNorm_1/moving_variance"
        string_val: "monodepth2_model/encoder/conv3_2/conv1/weights"
        string_val: "monodepth2_model/encoder/conv3_2/conv2/weights"
        string_val: "monodepth2_model/encoder/conv4_1/BatchNorm/beta"
        string_val: "monodepth2_model/encoder/conv4_1/BatchNorm/gamma"
        string_val: "monodepth2_model/encoder/conv4_1/BatchNorm/moving_mean"
        string_val: "monodepth2_model/encoder/conv4_1/BatchNorm/moving_variance"
        string_val: "monodepth2_model/encoder/conv4_1/BatchNorm_1/beta"
        string_val: "monodepth2_model/encoder/conv4_1/BatchNorm_1/gamma"
        string_val: "monodepth2_model/encoder/conv4_1/BatchNorm_1/moving_mean"
        string_val: "monodepth2_model/encoder/conv4_1/BatchNorm_1/moving_variance"
        string_val: "monodepth2_model/encoder/conv4_1/conv1/weights"
        string_val: "monodepth2_model/encoder/conv4_1/conv2/weights"
        string_val: "monodepth2_model/encoder/conv4_1/shortcut/weights"
        string_val: "monodepth2_model/encoder/conv4_2/BatchNorm/beta"
        string_val: "monodepth2_model/encoder/conv4_2/BatchNorm/gamma"
        string_val: "monodepth2_model/encoder/conv4_2/BatchNorm/moving_mean"
        string_val: "monodepth2_model/encoder/conv4_2/BatchNorm/moving_variance"
        string_val: "monodepth2_model/encoder/conv4_2/BatchNorm_1/beta"
        string_val: "monodepth2_model/encoder/conv4_2/BatchNorm_1/gamma"
        string_val: "monodepth2_model/encoder/conv4_2/BatchNorm_1/moving_mean"
        string_val: "monodepth2_model/encoder/conv4_2/BatchNorm_1/moving_variance"
        string_val: "monodepth2_model/encoder/conv4_2/conv1/weights"
        string_val: "monodepth2_model/encoder/conv4_2/conv2/weights"
        string_val: "monodepth2_model/encoder/conv5_1/BatchNorm/beta"
        string_val: "monodepth2_model/encoder/conv5_1/BatchNorm/gamma"
        string_val: "monodepth2_model/encoder/conv5_1/BatchNorm/moving_mean"
        string_val: "monodepth2_model/encoder/conv5_1/BatchNorm/moving_variance"
        string_val: "monodepth2_model/encoder/conv5_1/BatchNorm_1/beta"
        string_val: "monodepth2_model/encoder/conv5_1/BatchNorm_1/gamma"
        string_val: "monodepth2_model/encoder/conv5_1/BatchNorm_1/moving_mean"
        string_val: "monodepth2_model/encoder/conv5_1/BatchNorm_1/moving_variance"
        string_val: "monodepth2_model/encoder/conv5_1/conv1/weights"
        string_val: "monodepth2_model/encoder/conv5_1/conv2/weights"
        string_val: "monodepth2_model/encoder/conv5_1/shortcut/weights"
        string_val: "monodepth2_model/encoder/conv5_2/BatchNorm/beta"
        string_val: "monodepth2_model/encoder/conv5_2/BatchNorm/gamma"
        string_val: "monodepth2_model/encoder/conv5_2/BatchNorm/moving_mean"
        string_val: "monodepth2_model/encoder/conv5_2/BatchNorm/moving_variance"
        string_val: "monodepth2_model/encoder/conv5_2/BatchNorm_1/beta"
        string_val: "monodepth2_model/encoder/conv5_2/BatchNorm_1/gamma"
        string_val: "monodepth2_model/encoder/conv5_2/BatchNorm_1/moving_mean"
        string_val: "monodepth2_model/encoder/conv5_2/BatchNorm_1/moving_variance"
        string_val: "monodepth2_model/encoder/conv5_2/conv1/weights"
        string_val: "monodepth2_model/encoder/conv5_2/conv2/weights"
      }
    }
  }
}
node {
  name: "save/SaveV2/shape_and_slices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 116
          }
        }
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
      }
    }
  }
}
node {
  name: "save/SaveV2"
  op: "SaveV2"
  input: "save/Const"
  input: "save/SaveV2/tensor_names"
  input: "save/SaveV2/shape_and_slices"
  input: "monodepth2_model/depth_decoder/disp1/biases"
  input: "monodepth2_model/depth_decoder/disp1/weights"
  input: "monodepth2_model/depth_decoder/disp2/biases"
  input: "monodepth2_model/depth_decoder/disp2/weights"
  input: "monodepth2_model/depth_decoder/disp3/biases"
  input: "monodepth2_model/depth_decoder/disp3/weights"
  input: "monodepth2_model/depth_decoder/disp4/biases"
  input: "monodepth2_model/depth_decoder/disp4/weights"
  input: "monodepth2_model/depth_decoder/iconv1/biases"
  input: "monodepth2_model/depth_decoder/iconv1/weights"
  input: "monodepth2_model/depth_decoder/iconv2/biases"
  input: "monodepth2_model/depth_decoder/iconv2/weights"
  input: "monodepth2_model/depth_decoder/iconv3/biases"
  input: "monodepth2_model/depth_decoder/iconv3/weights"
  input: "monodepth2_model/depth_decoder/iconv4/biases"
  input: "monodepth2_model/depth_decoder/iconv4/weights"
  input: "monodepth2_model/depth_decoder/iconv5/biases"
  input: "monodepth2_model/depth_decoder/iconv5/weights"
  input: "monodepth2_model/depth_decoder/upconv1/biases"
  input: "monodepth2_model/depth_decoder/upconv1/weights"
  input: "monodepth2_model/depth_decoder/upconv2/biases"
  input: "monodepth2_model/depth_decoder/upconv2/weights"
  input: "monodepth2_model/depth_decoder/upconv3/biases"
  input: "monodepth2_model/depth_decoder/upconv3/weights"
  input: "monodepth2_model/depth_decoder/upconv4/biases"
  input: "monodepth2_model/depth_decoder/upconv4/weights"
  input: "monodepth2_model/depth_decoder/upconv5/biases"
  input: "monodepth2_model/depth_decoder/upconv5/weights"
  input: "monodepth2_model/encoder/conv1/BatchNorm/beta"
  input: "monodepth2_model/encoder/conv1/BatchNorm/gamma"
  input: "monodepth2_model/encoder/conv1/BatchNorm/moving_mean"
  input: "monodepth2_model/encoder/conv1/BatchNorm/moving_variance"
  input: "monodepth2_model/encoder/conv1/conv1/weights"
  input: "monodepth2_model/encoder/conv2_1/BatchNorm/beta"
  input: "monodepth2_model/encoder/conv2_1/BatchNorm/gamma"
  input: "monodepth2_model/encoder/conv2_1/BatchNorm/moving_mean"
  input: "monodepth2_model/encoder/conv2_1/BatchNorm/moving_variance"
  input: "monodepth2_model/encoder/conv2_1/BatchNorm_1/beta"
  input: "monodepth2_model/encoder/conv2_1/BatchNorm_1/gamma"
  input: "monodepth2_model/encoder/conv2_1/BatchNorm_1/moving_mean"
  input: "monodepth2_model/encoder/conv2_1/BatchNorm_1/moving_variance"
  input: "monodepth2_model/encoder/conv2_1/conv1/weights"
  input: "monodepth2_model/encoder/conv2_1/conv2/weights"
  input: "monodepth2_model/encoder/conv2_2/BatchNorm/beta"
  input: "monodepth2_model/encoder/conv2_2/BatchNorm/gamma"
  input: "monodepth2_model/encoder/conv2_2/BatchNorm/moving_mean"
  input: "monodepth2_model/encoder/conv2_2/BatchNorm/moving_variance"
  input: "monodepth2_model/encoder/conv2_2/BatchNorm_1/beta"
  input: "monodepth2_model/encoder/conv2_2/BatchNorm_1/gamma"
  input: "monodepth2_model/encoder/conv2_2/BatchNorm_1/moving_mean"
  input: "monodepth2_model/encoder/conv2_2/BatchNorm_1/moving_variance"
  input: "monodepth2_model/encoder/conv2_2/conv1/weights"
  input: "monodepth2_model/encoder/conv2_2/conv2/weights"
  input: "monodepth2_model/encoder/conv3_1/BatchNorm/beta"
  input: "monodepth2_model/encoder/conv3_1/BatchNorm/gamma"
  input: "monodepth2_model/encoder/conv3_1/BatchNorm/moving_mean"
  input: "monodepth2_model/encoder/conv3_1/BatchNorm/moving_variance"
  input: "monodepth2_model/encoder/conv3_1/BatchNorm_1/beta"
  input: "monodepth2_model/encoder/conv3_1/BatchNorm_1/gamma"
  input: "monodepth2_model/encoder/conv3_1/BatchNorm_1/moving_mean"
  input: "monodepth2_model/encoder/conv3_1/BatchNorm_1/moving_variance"
  input: "monodepth2_model/encoder/conv3_1/conv1/weights"
  input: "monodepth2_model/encoder/conv3_1/conv2/weights"
  input: "monodepth2_model/encoder/conv3_1/shortcut/weights"
  input: "monodepth2_model/encoder/conv3_2/BatchNorm/beta"
  input: "monodepth2_model/encoder/conv3_2/BatchNorm/gamma"
  input: "monodepth2_model/encoder/conv3_2/BatchNorm/moving_mean"
  input: "monodepth2_model/encoder/conv3_2/BatchNorm/moving_variance"
  input: "monodepth2_model/encoder/conv3_2/BatchNorm_1/beta"
  input: "monodepth2_model/encoder/conv3_2/BatchNorm_1/gamma"
  input: "monodepth2_model/encoder/conv3_2/BatchNorm_1/moving_mean"
  input: "monodepth2_model/encoder/conv3_2/BatchNorm_1/moving_variance"
  input: "monodepth2_model/encoder/conv3_2/conv1/weights"
  input: "monodepth2_model/encoder/conv3_2/conv2/weights"
  input: "monodepth2_model/encoder/conv4_1/BatchNorm/beta"
  input: "monodepth2_model/encoder/conv4_1/BatchNorm/gamma"
  input: "monodepth2_model/encoder/conv4_1/BatchNorm/moving_mean"
  input: "monodepth2_model/encoder/conv4_1/BatchNorm/moving_variance"
  input: "monodepth2_model/encoder/conv4_1/BatchNorm_1/beta"
  input: "monodepth2_model/encoder/conv4_1/BatchNorm_1/gamma"
  input: "monodepth2_model/encoder/conv4_1/BatchNorm_1/moving_mean"
  input: "monodepth2_model/encoder/conv4_1/BatchNorm_1/moving_variance"
  input: "monodepth2_model/encoder/conv4_1/conv1/weights"
  input: "monodepth2_model/encoder/conv4_1/conv2/weights"
  input: "monodepth2_model/encoder/conv4_1/shortcut/weights"
  input: "monodepth2_model/encoder/conv4_2/BatchNorm/beta"
  input: "monodepth2_model/encoder/conv4_2/BatchNorm/gamma"
  input: "monodepth2_model/encoder/conv4_2/BatchNorm/moving_mean"
  input: "monodepth2_model/encoder/conv4_2/BatchNorm/moving_variance"
  input: "monodepth2_model/encoder/conv4_2/BatchNorm_1/beta"
  input: "monodepth2_model/encoder/conv4_2/BatchNorm_1/gamma"
  input: "monodepth2_model/encoder/conv4_2/BatchNorm_1/moving_mean"
  input: "monodepth2_model/encoder/conv4_2/BatchNorm_1/moving_variance"
  input: "monodepth2_model/encoder/conv4_2/conv1/weights"
  input: "monodepth2_model/encoder/conv4_2/conv2/weights"
  input: "monodepth2_model/encoder/conv5_1/BatchNorm/beta"
  input: "monodepth2_model/encoder/conv5_1/BatchNorm/gamma"
  input: "monodepth2_model/encoder/conv5_1/BatchNorm/moving_mean"
  input: "monodepth2_model/encoder/conv5_1/BatchNorm/moving_variance"
  input: "monodepth2_model/encoder/conv5_1/BatchNorm_1/beta"
  input: "monodepth2_model/encoder/conv5_1/BatchNorm_1/gamma"
  input: "monodepth2_model/encoder/conv5_1/BatchNorm_1/moving_mean"
  input: "monodepth2_model/encoder/conv5_1/BatchNorm_1/moving_variance"
  input: "monodepth2_model/encoder/conv5_1/conv1/weights"
  input: "monodepth2_model/encoder/conv5_1/conv2/weights"
  input: "monodepth2_model/encoder/conv5_1/shortcut/weights"
  input: "monodepth2_model/encoder/conv5_2/BatchNorm/beta"
  input: "monodepth2_model/encoder/conv5_2/BatchNorm/gamma"
  input: "monodepth2_model/encoder/conv5_2/BatchNorm/moving_mean"
  input: "monodepth2_model/encoder/conv5_2/BatchNorm/moving_variance"
  input: "monodepth2_model/encoder/conv5_2/BatchNorm_1/beta"
  input: "monodepth2_model/encoder/conv5_2/BatchNorm_1/gamma"
  input: "monodepth2_model/encoder/conv5_2/BatchNorm_1/moving_mean"
  input: "monodepth2_model/encoder/conv5_2/BatchNorm_1/moving_variance"
  input: "monodepth2_model/encoder/conv5_2/conv1/weights"
  input: "monodepth2_model/encoder/conv5_2/conv2/weights"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/control_dependency"
  op: "Identity"
  input: "save/Const"
  input: "^save/SaveV2"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@save/Const"
      }
    }
  }
}
node {
  name: "save/RestoreV2/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 116
          }
        }
        string_val: "monodepth2_model/depth_decoder/disp1/biases"
        string_val: "monodepth2_model/depth_decoder/disp1/weights"
        string_val: "monodepth2_model/depth_decoder/disp2/biases"
        string_val: "monodepth2_model/depth_decoder/disp2/weights"
        string_val: "monodepth2_model/depth_decoder/disp3/biases"
        string_val: "monodepth2_model/depth_decoder/disp3/weights"
        string_val: "monodepth2_model/depth_decoder/disp4/biases"
        string_val: "monodepth2_model/depth_decoder/disp4/weights"
        string_val: "monodepth2_model/depth_decoder/iconv1/biases"
        string_val: "monodepth2_model/depth_decoder/iconv1/weights"
        string_val: "monodepth2_model/depth_decoder/iconv2/biases"
        string_val: "monodepth2_model/depth_decoder/iconv2/weights"
        string_val: "monodepth2_model/depth_decoder/iconv3/biases"
        string_val: "monodepth2_model/depth_decoder/iconv3/weights"
        string_val: "monodepth2_model/depth_decoder/iconv4/biases"
        string_val: "monodepth2_model/depth_decoder/iconv4/weights"
        string_val: "monodepth2_model/depth_decoder/iconv5/biases"
        string_val: "monodepth2_model/depth_decoder/iconv5/weights"
        string_val: "monodepth2_model/depth_decoder/upconv1/biases"
        string_val: "monodepth2_model/depth_decoder/upconv1/weights"
        string_val: "monodepth2_model/depth_decoder/upconv2/biases"
        string_val: "monodepth2_model/depth_decoder/upconv2/weights"
        string_val: "monodepth2_model/depth_decoder/upconv3/biases"
        string_val: "monodepth2_model/depth_decoder/upconv3/weights"
        string_val: "monodepth2_model/depth_decoder/upconv4/biases"
        string_val: "monodepth2_model/depth_decoder/upconv4/weights"
        string_val: "monodepth2_model/depth_decoder/upconv5/biases"
        string_val: "monodepth2_model/depth_decoder/upconv5/weights"
        string_val: "monodepth2_model/encoder/conv1/BatchNorm/beta"
        string_val: "monodepth2_model/encoder/conv1/BatchNorm/gamma"
        string_val: "monodepth2_model/encoder/conv1/BatchNorm/moving_mean"
        string_val: "monodepth2_model/encoder/conv1/BatchNorm/moving_variance"
        string_val: "monodepth2_model/encoder/conv1/conv1/weights"
        string_val: "monodepth2_model/encoder/conv2_1/BatchNorm/beta"
        string_val: "monodepth2_model/encoder/conv2_1/BatchNorm/gamma"
        string_val: "monodepth2_model/encoder/conv2_1/BatchNorm/moving_mean"
        string_val: "monodepth2_model/encoder/conv2_1/BatchNorm/moving_variance"
        string_val: "monodepth2_model/encoder/conv2_1/BatchNorm_1/beta"
        string_val: "monodepth2_model/encoder/conv2_1/BatchNorm_1/gamma"
        string_val: "monodepth2_model/encoder/conv2_1/BatchNorm_1/moving_mean"
        string_val: "monodepth2_model/encoder/conv2_1/BatchNorm_1/moving_variance"
        string_val: "monodepth2_model/encoder/conv2_1/conv1/weights"
        string_val: "monodepth2_model/encoder/conv2_1/conv2/weights"
        string_val: "monodepth2_model/encoder/conv2_2/BatchNorm/beta"
        string_val: "monodepth2_model/encoder/conv2_2/BatchNorm/gamma"
        string_val: "monodepth2_model/encoder/conv2_2/BatchNorm/moving_mean"
        string_val: "monodepth2_model/encoder/conv2_2/BatchNorm/moving_variance"
        string_val: "monodepth2_model/encoder/conv2_2/BatchNorm_1/beta"
        string_val: "monodepth2_model/encoder/conv2_2/BatchNorm_1/gamma"
        string_val: "monodepth2_model/encoder/conv2_2/BatchNorm_1/moving_mean"
        string_val: "monodepth2_model/encoder/conv2_2/BatchNorm_1/moving_variance"
        string_val: "monodepth2_model/encoder/conv2_2/conv1/weights"
        string_val: "monodepth2_model/encoder/conv2_2/conv2/weights"
        string_val: "monodepth2_model/encoder/conv3_1/BatchNorm/beta"
        string_val: "monodepth2_model/encoder/conv3_1/BatchNorm/gamma"
        string_val: "monodepth2_model/encoder/conv3_1/BatchNorm/moving_mean"
        string_val: "monodepth2_model/encoder/conv3_1/BatchNorm/moving_variance"
        string_val: "monodepth2_model/encoder/conv3_1/BatchNorm_1/beta"
        string_val: "monodepth2_model/encoder/conv3_1/BatchNorm_1/gamma"
        string_val: "monodepth2_model/encoder/conv3_1/BatchNorm_1/moving_mean"
        string_val: "monodepth2_model/encoder/conv3_1/BatchNorm_1/moving_variance"
        string_val: "monodepth2_model/encoder/conv3_1/conv1/weights"
        string_val: "monodepth2_model/encoder/conv3_1/conv2/weights"
        string_val: "monodepth2_model/encoder/conv3_1/shortcut/weights"
        string_val: "monodepth2_model/encoder/conv3_2/BatchNorm/beta"
        string_val: "monodepth2_model/encoder/conv3_2/BatchNorm/gamma"
        string_val: "monodepth2_model/encoder/conv3_2/BatchNorm/moving_mean"
        string_val: "monodepth2_model/encoder/conv3_2/BatchNorm/moving_variance"
        string_val: "monodepth2_model/encoder/conv3_2/BatchNorm_1/beta"
        string_val: "monodepth2_model/encoder/conv3_2/BatchNorm_1/gamma"
        string_val: "monodepth2_model/encoder/conv3_2/BatchNorm_1/moving_mean"
        string_val: "monodepth2_model/encoder/conv3_2/BatchNorm_1/moving_variance"
        string_val: "monodepth2_model/encoder/conv3_2/conv1/weights"
        string_val: "monodepth2_model/encoder/conv3_2/conv2/weights"
        string_val: "monodepth2_model/encoder/conv4_1/BatchNorm/beta"
        string_val: "monodepth2_model/encoder/conv4_1/BatchNorm/gamma"
        string_val: "monodepth2_model/encoder/conv4_1/BatchNorm/moving_mean"
        string_val: "monodepth2_model/encoder/conv4_1/BatchNorm/moving_variance"
        string_val: "monodepth2_model/encoder/conv4_1/BatchNorm_1/beta"
        string_val: "monodepth2_model/encoder/conv4_1/BatchNorm_1/gamma"
        string_val: "monodepth2_model/encoder/conv4_1/BatchNorm_1/moving_mean"
        string_val: "monodepth2_model/encoder/conv4_1/BatchNorm_1/moving_variance"
        string_val: "monodepth2_model/encoder/conv4_1/conv1/weights"
        string_val: "monodepth2_model/encoder/conv4_1/conv2/weights"
        string_val: "monodepth2_model/encoder/conv4_1/shortcut/weights"
        string_val: "monodepth2_model/encoder/conv4_2/BatchNorm/beta"
        string_val: "monodepth2_model/encoder/conv4_2/BatchNorm/gamma"
        string_val: "monodepth2_model/encoder/conv4_2/BatchNorm/moving_mean"
        string_val: "monodepth2_model/encoder/conv4_2/BatchNorm/moving_variance"
        string_val: "monodepth2_model/encoder/conv4_2/BatchNorm_1/beta"
        string_val: "monodepth2_model/encoder/conv4_2/BatchNorm_1/gamma"
        string_val: "monodepth2_model/encoder/conv4_2/BatchNorm_1/moving_mean"
        string_val: "monodepth2_model/encoder/conv4_2/BatchNorm_1/moving_variance"
        string_val: "monodepth2_model/encoder/conv4_2/conv1/weights"
        string_val: "monodepth2_model/encoder/conv4_2/conv2/weights"
        string_val: "monodepth2_model/encoder/conv5_1/BatchNorm/beta"
        string_val: "monodepth2_model/encoder/conv5_1/BatchNorm/gamma"
        string_val: "monodepth2_model/encoder/conv5_1/BatchNorm/moving_mean"
        string_val: "monodepth2_model/encoder/conv5_1/BatchNorm/moving_variance"
        string_val: "monodepth2_model/encoder/conv5_1/BatchNorm_1/beta"
        string_val: "monodepth2_model/encoder/conv5_1/BatchNorm_1/gamma"
        string_val: "monodepth2_model/encoder/conv5_1/BatchNorm_1/moving_mean"
        string_val: "monodepth2_model/encoder/conv5_1/BatchNorm_1/moving_variance"
        string_val: "monodepth2_model/encoder/conv5_1/conv1/weights"
        string_val: "monodepth2_model/encoder/conv5_1/conv2/weights"
        string_val: "monodepth2_model/encoder/conv5_1/shortcut/weights"
        string_val: "monodepth2_model/encoder/conv5_2/BatchNorm/beta"
        string_val: "monodepth2_model/encoder/conv5_2/BatchNorm/gamma"
        string_val: "monodepth2_model/encoder/conv5_2/BatchNorm/moving_mean"
        string_val: "monodepth2_model/encoder/conv5_2/BatchNorm/moving_variance"
        string_val: "monodepth2_model/encoder/conv5_2/BatchNorm_1/beta"
        string_val: "monodepth2_model/encoder/conv5_2/BatchNorm_1/gamma"
        string_val: "monodepth2_model/encoder/conv5_2/BatchNorm_1/moving_mean"
        string_val: "monodepth2_model/encoder/conv5_2/BatchNorm_1/moving_variance"
        string_val: "monodepth2_model/encoder/conv5_2/conv1/weights"
        string_val: "monodepth2_model/encoder/conv5_2/conv2/weights"
      }
    }
  }
}
node {
  name: "save/RestoreV2/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 116
          }
        }
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2/tensor_names"
  input: "save/RestoreV2/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign"
  op: "Assign"
  input: "monodepth2_model/depth_decoder/disp1/biases"
  input: "save/RestoreV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/depth_decoder/disp1/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_1"
  op: "Assign"
  input: "monodepth2_model/depth_decoder/disp1/weights"
  input: "save/RestoreV2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/depth_decoder/disp1/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_2"
  op: "Assign"
  input: "monodepth2_model/depth_decoder/disp2/biases"
  input: "save/RestoreV2:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/depth_decoder/disp2/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_3"
  op: "Assign"
  input: "monodepth2_model/depth_decoder/disp2/weights"
  input: "save/RestoreV2:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/depth_decoder/disp2/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_4"
  op: "Assign"
  input: "monodepth2_model/depth_decoder/disp3/biases"
  input: "save/RestoreV2:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/depth_decoder/disp3/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_5"
  op: "Assign"
  input: "monodepth2_model/depth_decoder/disp3/weights"
  input: "save/RestoreV2:5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/depth_decoder/disp3/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_6"
  op: "Assign"
  input: "monodepth2_model/depth_decoder/disp4/biases"
  input: "save/RestoreV2:6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/depth_decoder/disp4/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_7"
  op: "Assign"
  input: "monodepth2_model/depth_decoder/disp4/weights"
  input: "save/RestoreV2:7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/depth_decoder/disp4/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_8"
  op: "Assign"
  input: "monodepth2_model/depth_decoder/iconv1/biases"
  input: "save/RestoreV2:8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/depth_decoder/iconv1/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_9"
  op: "Assign"
  input: "monodepth2_model/depth_decoder/iconv1/weights"
  input: "save/RestoreV2:9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/depth_decoder/iconv1/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_10"
  op: "Assign"
  input: "monodepth2_model/depth_decoder/iconv2/biases"
  input: "save/RestoreV2:10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/depth_decoder/iconv2/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_11"
  op: "Assign"
  input: "monodepth2_model/depth_decoder/iconv2/weights"
  input: "save/RestoreV2:11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/depth_decoder/iconv2/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_12"
  op: "Assign"
  input: "monodepth2_model/depth_decoder/iconv3/biases"
  input: "save/RestoreV2:12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/depth_decoder/iconv3/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_13"
  op: "Assign"
  input: "monodepth2_model/depth_decoder/iconv3/weights"
  input: "save/RestoreV2:13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/depth_decoder/iconv3/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_14"
  op: "Assign"
  input: "monodepth2_model/depth_decoder/iconv4/biases"
  input: "save/RestoreV2:14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/depth_decoder/iconv4/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_15"
  op: "Assign"
  input: "monodepth2_model/depth_decoder/iconv4/weights"
  input: "save/RestoreV2:15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/depth_decoder/iconv4/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_16"
  op: "Assign"
  input: "monodepth2_model/depth_decoder/iconv5/biases"
  input: "save/RestoreV2:16"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/depth_decoder/iconv5/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_17"
  op: "Assign"
  input: "monodepth2_model/depth_decoder/iconv5/weights"
  input: "save/RestoreV2:17"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/depth_decoder/iconv5/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_18"
  op: "Assign"
  input: "monodepth2_model/depth_decoder/upconv1/biases"
  input: "save/RestoreV2:18"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/depth_decoder/upconv1/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_19"
  op: "Assign"
  input: "monodepth2_model/depth_decoder/upconv1/weights"
  input: "save/RestoreV2:19"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/depth_decoder/upconv1/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_20"
  op: "Assign"
  input: "monodepth2_model/depth_decoder/upconv2/biases"
  input: "save/RestoreV2:20"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/depth_decoder/upconv2/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_21"
  op: "Assign"
  input: "monodepth2_model/depth_decoder/upconv2/weights"
  input: "save/RestoreV2:21"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/depth_decoder/upconv2/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_22"
  op: "Assign"
  input: "monodepth2_model/depth_decoder/upconv3/biases"
  input: "save/RestoreV2:22"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/depth_decoder/upconv3/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_23"
  op: "Assign"
  input: "monodepth2_model/depth_decoder/upconv3/weights"
  input: "save/RestoreV2:23"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/depth_decoder/upconv3/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_24"
  op: "Assign"
  input: "monodepth2_model/depth_decoder/upconv4/biases"
  input: "save/RestoreV2:24"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/depth_decoder/upconv4/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_25"
  op: "Assign"
  input: "monodepth2_model/depth_decoder/upconv4/weights"
  input: "save/RestoreV2:25"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/depth_decoder/upconv4/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_26"
  op: "Assign"
  input: "monodepth2_model/depth_decoder/upconv5/biases"
  input: "save/RestoreV2:26"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/depth_decoder/upconv5/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_27"
  op: "Assign"
  input: "monodepth2_model/depth_decoder/upconv5/weights"
  input: "save/RestoreV2:27"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/depth_decoder/upconv5/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_28"
  op: "Assign"
  input: "monodepth2_model/encoder/conv1/BatchNorm/beta"
  input: "save/RestoreV2:28"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv1/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_29"
  op: "Assign"
  input: "monodepth2_model/encoder/conv1/BatchNorm/gamma"
  input: "save/RestoreV2:29"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv1/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_30"
  op: "Assign"
  input: "monodepth2_model/encoder/conv1/BatchNorm/moving_mean"
  input: "save/RestoreV2:30"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv1/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_31"
  op: "Assign"
  input: "monodepth2_model/encoder/conv1/BatchNorm/moving_variance"
  input: "save/RestoreV2:31"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv1/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_32"
  op: "Assign"
  input: "monodepth2_model/encoder/conv1/conv1/weights"
  input: "save/RestoreV2:32"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv1/conv1/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_33"
  op: "Assign"
  input: "monodepth2_model/encoder/conv2_1/BatchNorm/beta"
  input: "save/RestoreV2:33"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv2_1/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_34"
  op: "Assign"
  input: "monodepth2_model/encoder/conv2_1/BatchNorm/gamma"
  input: "save/RestoreV2:34"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv2_1/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_35"
  op: "Assign"
  input: "monodepth2_model/encoder/conv2_1/BatchNorm/moving_mean"
  input: "save/RestoreV2:35"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv2_1/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_36"
  op: "Assign"
  input: "monodepth2_model/encoder/conv2_1/BatchNorm/moving_variance"
  input: "save/RestoreV2:36"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv2_1/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_37"
  op: "Assign"
  input: "monodepth2_model/encoder/conv2_1/BatchNorm_1/beta"
  input: "save/RestoreV2:37"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv2_1/BatchNorm_1/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_38"
  op: "Assign"
  input: "monodepth2_model/encoder/conv2_1/BatchNorm_1/gamma"
  input: "save/RestoreV2:38"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv2_1/BatchNorm_1/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_39"
  op: "Assign"
  input: "monodepth2_model/encoder/conv2_1/BatchNorm_1/moving_mean"
  input: "save/RestoreV2:39"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv2_1/BatchNorm_1/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_40"
  op: "Assign"
  input: "monodepth2_model/encoder/conv2_1/BatchNorm_1/moving_variance"
  input: "save/RestoreV2:40"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv2_1/BatchNorm_1/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_41"
  op: "Assign"
  input: "monodepth2_model/encoder/conv2_1/conv1/weights"
  input: "save/RestoreV2:41"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv2_1/conv1/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_42"
  op: "Assign"
  input: "monodepth2_model/encoder/conv2_1/conv2/weights"
  input: "save/RestoreV2:42"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv2_1/conv2/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_43"
  op: "Assign"
  input: "monodepth2_model/encoder/conv2_2/BatchNorm/beta"
  input: "save/RestoreV2:43"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv2_2/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_44"
  op: "Assign"
  input: "monodepth2_model/encoder/conv2_2/BatchNorm/gamma"
  input: "save/RestoreV2:44"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv2_2/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_45"
  op: "Assign"
  input: "monodepth2_model/encoder/conv2_2/BatchNorm/moving_mean"
  input: "save/RestoreV2:45"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv2_2/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_46"
  op: "Assign"
  input: "monodepth2_model/encoder/conv2_2/BatchNorm/moving_variance"
  input: "save/RestoreV2:46"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv2_2/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_47"
  op: "Assign"
  input: "monodepth2_model/encoder/conv2_2/BatchNorm_1/beta"
  input: "save/RestoreV2:47"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv2_2/BatchNorm_1/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_48"
  op: "Assign"
  input: "monodepth2_model/encoder/conv2_2/BatchNorm_1/gamma"
  input: "save/RestoreV2:48"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv2_2/BatchNorm_1/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_49"
  op: "Assign"
  input: "monodepth2_model/encoder/conv2_2/BatchNorm_1/moving_mean"
  input: "save/RestoreV2:49"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv2_2/BatchNorm_1/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_50"
  op: "Assign"
  input: "monodepth2_model/encoder/conv2_2/BatchNorm_1/moving_variance"
  input: "save/RestoreV2:50"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv2_2/BatchNorm_1/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_51"
  op: "Assign"
  input: "monodepth2_model/encoder/conv2_2/conv1/weights"
  input: "save/RestoreV2:51"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv2_2/conv1/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_52"
  op: "Assign"
  input: "monodepth2_model/encoder/conv2_2/conv2/weights"
  input: "save/RestoreV2:52"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv2_2/conv2/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_53"
  op: "Assign"
  input: "monodepth2_model/encoder/conv3_1/BatchNorm/beta"
  input: "save/RestoreV2:53"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv3_1/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_54"
  op: "Assign"
  input: "monodepth2_model/encoder/conv3_1/BatchNorm/gamma"
  input: "save/RestoreV2:54"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv3_1/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_55"
  op: "Assign"
  input: "monodepth2_model/encoder/conv3_1/BatchNorm/moving_mean"
  input: "save/RestoreV2:55"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv3_1/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_56"
  op: "Assign"
  input: "monodepth2_model/encoder/conv3_1/BatchNorm/moving_variance"
  input: "save/RestoreV2:56"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv3_1/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_57"
  op: "Assign"
  input: "monodepth2_model/encoder/conv3_1/BatchNorm_1/beta"
  input: "save/RestoreV2:57"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv3_1/BatchNorm_1/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_58"
  op: "Assign"
  input: "monodepth2_model/encoder/conv3_1/BatchNorm_1/gamma"
  input: "save/RestoreV2:58"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv3_1/BatchNorm_1/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_59"
  op: "Assign"
  input: "monodepth2_model/encoder/conv3_1/BatchNorm_1/moving_mean"
  input: "save/RestoreV2:59"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv3_1/BatchNorm_1/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_60"
  op: "Assign"
  input: "monodepth2_model/encoder/conv3_1/BatchNorm_1/moving_variance"
  input: "save/RestoreV2:60"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv3_1/BatchNorm_1/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_61"
  op: "Assign"
  input: "monodepth2_model/encoder/conv3_1/conv1/weights"
  input: "save/RestoreV2:61"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv3_1/conv1/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_62"
  op: "Assign"
  input: "monodepth2_model/encoder/conv3_1/conv2/weights"
  input: "save/RestoreV2:62"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv3_1/conv2/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_63"
  op: "Assign"
  input: "monodepth2_model/encoder/conv3_1/shortcut/weights"
  input: "save/RestoreV2:63"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv3_1/shortcut/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_64"
  op: "Assign"
  input: "monodepth2_model/encoder/conv3_2/BatchNorm/beta"
  input: "save/RestoreV2:64"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv3_2/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_65"
  op: "Assign"
  input: "monodepth2_model/encoder/conv3_2/BatchNorm/gamma"
  input: "save/RestoreV2:65"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv3_2/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_66"
  op: "Assign"
  input: "monodepth2_model/encoder/conv3_2/BatchNorm/moving_mean"
  input: "save/RestoreV2:66"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv3_2/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_67"
  op: "Assign"
  input: "monodepth2_model/encoder/conv3_2/BatchNorm/moving_variance"
  input: "save/RestoreV2:67"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv3_2/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_68"
  op: "Assign"
  input: "monodepth2_model/encoder/conv3_2/BatchNorm_1/beta"
  input: "save/RestoreV2:68"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv3_2/BatchNorm_1/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_69"
  op: "Assign"
  input: "monodepth2_model/encoder/conv3_2/BatchNorm_1/gamma"
  input: "save/RestoreV2:69"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv3_2/BatchNorm_1/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_70"
  op: "Assign"
  input: "monodepth2_model/encoder/conv3_2/BatchNorm_1/moving_mean"
  input: "save/RestoreV2:70"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv3_2/BatchNorm_1/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_71"
  op: "Assign"
  input: "monodepth2_model/encoder/conv3_2/BatchNorm_1/moving_variance"
  input: "save/RestoreV2:71"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv3_2/BatchNorm_1/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_72"
  op: "Assign"
  input: "monodepth2_model/encoder/conv3_2/conv1/weights"
  input: "save/RestoreV2:72"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv3_2/conv1/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_73"
  op: "Assign"
  input: "monodepth2_model/encoder/conv3_2/conv2/weights"
  input: "save/RestoreV2:73"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv3_2/conv2/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_74"
  op: "Assign"
  input: "monodepth2_model/encoder/conv4_1/BatchNorm/beta"
  input: "save/RestoreV2:74"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv4_1/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_75"
  op: "Assign"
  input: "monodepth2_model/encoder/conv4_1/BatchNorm/gamma"
  input: "save/RestoreV2:75"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv4_1/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_76"
  op: "Assign"
  input: "monodepth2_model/encoder/conv4_1/BatchNorm/moving_mean"
  input: "save/RestoreV2:76"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv4_1/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_77"
  op: "Assign"
  input: "monodepth2_model/encoder/conv4_1/BatchNorm/moving_variance"
  input: "save/RestoreV2:77"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv4_1/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_78"
  op: "Assign"
  input: "monodepth2_model/encoder/conv4_1/BatchNorm_1/beta"
  input: "save/RestoreV2:78"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv4_1/BatchNorm_1/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_79"
  op: "Assign"
  input: "monodepth2_model/encoder/conv4_1/BatchNorm_1/gamma"
  input: "save/RestoreV2:79"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv4_1/BatchNorm_1/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_80"
  op: "Assign"
  input: "monodepth2_model/encoder/conv4_1/BatchNorm_1/moving_mean"
  input: "save/RestoreV2:80"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv4_1/BatchNorm_1/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_81"
  op: "Assign"
  input: "monodepth2_model/encoder/conv4_1/BatchNorm_1/moving_variance"
  input: "save/RestoreV2:81"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv4_1/BatchNorm_1/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_82"
  op: "Assign"
  input: "monodepth2_model/encoder/conv4_1/conv1/weights"
  input: "save/RestoreV2:82"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv4_1/conv1/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_83"
  op: "Assign"
  input: "monodepth2_model/encoder/conv4_1/conv2/weights"
  input: "save/RestoreV2:83"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv4_1/conv2/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_84"
  op: "Assign"
  input: "monodepth2_model/encoder/conv4_1/shortcut/weights"
  input: "save/RestoreV2:84"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv4_1/shortcut/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_85"
  op: "Assign"
  input: "monodepth2_model/encoder/conv4_2/BatchNorm/beta"
  input: "save/RestoreV2:85"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv4_2/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_86"
  op: "Assign"
  input: "monodepth2_model/encoder/conv4_2/BatchNorm/gamma"
  input: "save/RestoreV2:86"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv4_2/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_87"
  op: "Assign"
  input: "monodepth2_model/encoder/conv4_2/BatchNorm/moving_mean"
  input: "save/RestoreV2:87"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv4_2/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_88"
  op: "Assign"
  input: "monodepth2_model/encoder/conv4_2/BatchNorm/moving_variance"
  input: "save/RestoreV2:88"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv4_2/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_89"
  op: "Assign"
  input: "monodepth2_model/encoder/conv4_2/BatchNorm_1/beta"
  input: "save/RestoreV2:89"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv4_2/BatchNorm_1/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_90"
  op: "Assign"
  input: "monodepth2_model/encoder/conv4_2/BatchNorm_1/gamma"
  input: "save/RestoreV2:90"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv4_2/BatchNorm_1/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_91"
  op: "Assign"
  input: "monodepth2_model/encoder/conv4_2/BatchNorm_1/moving_mean"
  input: "save/RestoreV2:91"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv4_2/BatchNorm_1/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_92"
  op: "Assign"
  input: "monodepth2_model/encoder/conv4_2/BatchNorm_1/moving_variance"
  input: "save/RestoreV2:92"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv4_2/BatchNorm_1/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_93"
  op: "Assign"
  input: "monodepth2_model/encoder/conv4_2/conv1/weights"
  input: "save/RestoreV2:93"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv4_2/conv1/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_94"
  op: "Assign"
  input: "monodepth2_model/encoder/conv4_2/conv2/weights"
  input: "save/RestoreV2:94"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv4_2/conv2/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_95"
  op: "Assign"
  input: "monodepth2_model/encoder/conv5_1/BatchNorm/beta"
  input: "save/RestoreV2:95"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv5_1/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_96"
  op: "Assign"
  input: "monodepth2_model/encoder/conv5_1/BatchNorm/gamma"
  input: "save/RestoreV2:96"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv5_1/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_97"
  op: "Assign"
  input: "monodepth2_model/encoder/conv5_1/BatchNorm/moving_mean"
  input: "save/RestoreV2:97"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv5_1/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_98"
  op: "Assign"
  input: "monodepth2_model/encoder/conv5_1/BatchNorm/moving_variance"
  input: "save/RestoreV2:98"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv5_1/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_99"
  op: "Assign"
  input: "monodepth2_model/encoder/conv5_1/BatchNorm_1/beta"
  input: "save/RestoreV2:99"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv5_1/BatchNorm_1/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_100"
  op: "Assign"
  input: "monodepth2_model/encoder/conv5_1/BatchNorm_1/gamma"
  input: "save/RestoreV2:100"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv5_1/BatchNorm_1/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_101"
  op: "Assign"
  input: "monodepth2_model/encoder/conv5_1/BatchNorm_1/moving_mean"
  input: "save/RestoreV2:101"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv5_1/BatchNorm_1/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_102"
  op: "Assign"
  input: "monodepth2_model/encoder/conv5_1/BatchNorm_1/moving_variance"
  input: "save/RestoreV2:102"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv5_1/BatchNorm_1/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_103"
  op: "Assign"
  input: "monodepth2_model/encoder/conv5_1/conv1/weights"
  input: "save/RestoreV2:103"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv5_1/conv1/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_104"
  op: "Assign"
  input: "monodepth2_model/encoder/conv5_1/conv2/weights"
  input: "save/RestoreV2:104"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv5_1/conv2/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_105"
  op: "Assign"
  input: "monodepth2_model/encoder/conv5_1/shortcut/weights"
  input: "save/RestoreV2:105"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv5_1/shortcut/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_106"
  op: "Assign"
  input: "monodepth2_model/encoder/conv5_2/BatchNorm/beta"
  input: "save/RestoreV2:106"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv5_2/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_107"
  op: "Assign"
  input: "monodepth2_model/encoder/conv5_2/BatchNorm/gamma"
  input: "save/RestoreV2:107"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv5_2/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_108"
  op: "Assign"
  input: "monodepth2_model/encoder/conv5_2/BatchNorm/moving_mean"
  input: "save/RestoreV2:108"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv5_2/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_109"
  op: "Assign"
  input: "monodepth2_model/encoder/conv5_2/BatchNorm/moving_variance"
  input: "save/RestoreV2:109"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv5_2/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_110"
  op: "Assign"
  input: "monodepth2_model/encoder/conv5_2/BatchNorm_1/beta"
  input: "save/RestoreV2:110"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv5_2/BatchNorm_1/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_111"
  op: "Assign"
  input: "monodepth2_model/encoder/conv5_2/BatchNorm_1/gamma"
  input: "save/RestoreV2:111"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv5_2/BatchNorm_1/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_112"
  op: "Assign"
  input: "monodepth2_model/encoder/conv5_2/BatchNorm_1/moving_mean"
  input: "save/RestoreV2:112"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv5_2/BatchNorm_1/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_113"
  op: "Assign"
  input: "monodepth2_model/encoder/conv5_2/BatchNorm_1/moving_variance"
  input: "save/RestoreV2:113"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv5_2/BatchNorm_1/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_114"
  op: "Assign"
  input: "monodepth2_model/encoder/conv5_2/conv1/weights"
  input: "save/RestoreV2:114"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv5_2/conv1/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_115"
  op: "Assign"
  input: "monodepth2_model/encoder/conv5_2/conv2/weights"
  input: "save/RestoreV2:115"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@monodepth2_model/encoder/conv5_2/conv2/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_all"
  op: "NoOp"
  input: "^save/Assign"
  input: "^save/Assign_1"
  input: "^save/Assign_10"
  input: "^save/Assign_100"
  input: "^save/Assign_101"
  input: "^save/Assign_102"
  input: "^save/Assign_103"
  input: "^save/Assign_104"
  input: "^save/Assign_105"
  input: "^save/Assign_106"
  input: "^save/Assign_107"
  input: "^save/Assign_108"
  input: "^save/Assign_109"
  input: "^save/Assign_11"
  input: "^save/Assign_110"
  input: "^save/Assign_111"
  input: "^save/Assign_112"
  input: "^save/Assign_113"
  input: "^save/Assign_114"
  input: "^save/Assign_115"
  input: "^save/Assign_12"
  input: "^save/Assign_13"
  input: "^save/Assign_14"
  input: "^save/Assign_15"
  input: "^save/Assign_16"
  input: "^save/Assign_17"
  input: "^save/Assign_18"
  input: "^save/Assign_19"
  input: "^save/Assign_2"
  input: "^save/Assign_20"
  input: "^save/Assign_21"
  input: "^save/Assign_22"
  input: "^save/Assign_23"
  input: "^save/Assign_24"
  input: "^save/Assign_25"
  input: "^save/Assign_26"
  input: "^save/Assign_27"
  input: "^save/Assign_28"
  input: "^save/Assign_29"
  input: "^save/Assign_3"
  input: "^save/Assign_30"
  input: "^save/Assign_31"
  input: "^save/Assign_32"
  input: "^save/Assign_33"
  input: "^save/Assign_34"
  input: "^save/Assign_35"
  input: "^save/Assign_36"
  input: "^save/Assign_37"
  input: "^save/Assign_38"
  input: "^save/Assign_39"
  input: "^save/Assign_4"
  input: "^save/Assign_40"
  input: "^save/Assign_41"
  input: "^save/Assign_42"
  input: "^save/Assign_43"
  input: "^save/Assign_44"
  input: "^save/Assign_45"
  input: "^save/Assign_46"
  input: "^save/Assign_47"
  input: "^save/Assign_48"
  input: "^save/Assign_49"
  input: "^save/Assign_5"
  input: "^save/Assign_50"
  input: "^save/Assign_51"
  input: "^save/Assign_52"
  input: "^save/Assign_53"
  input: "^save/Assign_54"
  input: "^save/Assign_55"
  input: "^save/Assign_56"
  input: "^save/Assign_57"
  input: "^save/Assign_58"
  input: "^save/Assign_59"
  input: "^save/Assign_6"
  input: "^save/Assign_60"
  input: "^save/Assign_61"
  input: "^save/Assign_62"
  input: "^save/Assign_63"
  input: "^save/Assign_64"
  input: "^save/Assign_65"
  input: "^save/Assign_66"
  input: "^save/Assign_67"
  input: "^save/Assign_68"
  input: "^save/Assign_69"
  input: "^save/Assign_7"
  input: "^save/Assign_70"
  input: "^save/Assign_71"
  input: "^save/Assign_72"
  input: "^save/Assign_73"
  input: "^save/Assign_74"
  input: "^save/Assign_75"
  input: "^save/Assign_76"
  input: "^save/Assign_77"
  input: "^save/Assign_78"
  input: "^save/Assign_79"
  input: "^save/Assign_8"
  input: "^save/Assign_80"
  input: "^save/Assign_81"
  input: "^save/Assign_82"
  input: "^save/Assign_83"
  input: "^save/Assign_84"
  input: "^save/Assign_85"
  input: "^save/Assign_86"
  input: "^save/Assign_87"
  input: "^save/Assign_88"
  input: "^save/Assign_89"
  input: "^save/Assign_9"
  input: "^save/Assign_90"
  input: "^save/Assign_91"
  input: "^save/Assign_92"
  input: "^save/Assign_93"
  input: "^save/Assign_94"
  input: "^save/Assign_95"
  input: "^save/Assign_96"
  input: "^save/Assign_97"
  input: "^save/Assign_98"
  input: "^save/Assign_99"
}
node {
  name: "init"
  op: "NoOp"
  input: "^monodepth2_model/depth_decoder/disp1/biases/Assign"
  input: "^monodepth2_model/depth_decoder/disp1/weights/Assign"
  input: "^monodepth2_model/depth_decoder/disp2/biases/Assign"
  input: "^monodepth2_model/depth_decoder/disp2/weights/Assign"
  input: "^monodepth2_model/depth_decoder/disp3/biases/Assign"
  input: "^monodepth2_model/depth_decoder/disp3/weights/Assign"
  input: "^monodepth2_model/depth_decoder/disp4/biases/Assign"
  input: "^monodepth2_model/depth_decoder/disp4/weights/Assign"
  input: "^monodepth2_model/depth_decoder/iconv1/biases/Assign"
  input: "^monodepth2_model/depth_decoder/iconv1/weights/Assign"
  input: "^monodepth2_model/depth_decoder/iconv2/biases/Assign"
  input: "^monodepth2_model/depth_decoder/iconv2/weights/Assign"
  input: "^monodepth2_model/depth_decoder/iconv3/biases/Assign"
  input: "^monodepth2_model/depth_decoder/iconv3/weights/Assign"
  input: "^monodepth2_model/depth_decoder/iconv4/biases/Assign"
  input: "^monodepth2_model/depth_decoder/iconv4/weights/Assign"
  input: "^monodepth2_model/depth_decoder/iconv5/biases/Assign"
  input: "^monodepth2_model/depth_decoder/iconv5/weights/Assign"
  input: "^monodepth2_model/depth_decoder/upconv1/biases/Assign"
  input: "^monodepth2_model/depth_decoder/upconv1/weights/Assign"
  input: "^monodepth2_model/depth_decoder/upconv2/biases/Assign"
  input: "^monodepth2_model/depth_decoder/upconv2/weights/Assign"
  input: "^monodepth2_model/depth_decoder/upconv3/biases/Assign"
  input: "^monodepth2_model/depth_decoder/upconv3/weights/Assign"
  input: "^monodepth2_model/depth_decoder/upconv4/biases/Assign"
  input: "^monodepth2_model/depth_decoder/upconv4/weights/Assign"
  input: "^monodepth2_model/depth_decoder/upconv5/biases/Assign"
  input: "^monodepth2_model/depth_decoder/upconv5/weights/Assign"
  input: "^monodepth2_model/encoder/conv1/BatchNorm/beta/Assign"
  input: "^monodepth2_model/encoder/conv1/BatchNorm/gamma/Assign"
  input: "^monodepth2_model/encoder/conv1/BatchNorm/moving_mean/Assign"
  input: "^monodepth2_model/encoder/conv1/BatchNorm/moving_variance/Assign"
  input: "^monodepth2_model/encoder/conv1/conv1/weights/Assign"
  input: "^monodepth2_model/encoder/conv2_1/BatchNorm/beta/Assign"
  input: "^monodepth2_model/encoder/conv2_1/BatchNorm/gamma/Assign"
  input: "^monodepth2_model/encoder/conv2_1/BatchNorm/moving_mean/Assign"
  input: "^monodepth2_model/encoder/conv2_1/BatchNorm/moving_variance/Assign"
  input: "^monodepth2_model/encoder/conv2_1/BatchNorm_1/beta/Assign"
  input: "^monodepth2_model/encoder/conv2_1/BatchNorm_1/gamma/Assign"
  input: "^monodepth2_model/encoder/conv2_1/BatchNorm_1/moving_mean/Assign"
  input: "^monodepth2_model/encoder/conv2_1/BatchNorm_1/moving_variance/Assign"
  input: "^monodepth2_model/encoder/conv2_1/conv1/weights/Assign"
  input: "^monodepth2_model/encoder/conv2_1/conv2/weights/Assign"
  input: "^monodepth2_model/encoder/conv2_2/BatchNorm/beta/Assign"
  input: "^monodepth2_model/encoder/conv2_2/BatchNorm/gamma/Assign"
  input: "^monodepth2_model/encoder/conv2_2/BatchNorm/moving_mean/Assign"
  input: "^monodepth2_model/encoder/conv2_2/BatchNorm/moving_variance/Assign"
  input: "^monodepth2_model/encoder/conv2_2/BatchNorm_1/beta/Assign"
  input: "^monodepth2_model/encoder/conv2_2/BatchNorm_1/gamma/Assign"
  input: "^monodepth2_model/encoder/conv2_2/BatchNorm_1/moving_mean/Assign"
  input: "^monodepth2_model/encoder/conv2_2/BatchNorm_1/moving_variance/Assign"
  input: "^monodepth2_model/encoder/conv2_2/conv1/weights/Assign"
  input: "^monodepth2_model/encoder/conv2_2/conv2/weights/Assign"
  input: "^monodepth2_model/encoder/conv3_1/BatchNorm/beta/Assign"
  input: "^monodepth2_model/encoder/conv3_1/BatchNorm/gamma/Assign"
  input: "^monodepth2_model/encoder/conv3_1/BatchNorm/moving_mean/Assign"
  input: "^monodepth2_model/encoder/conv3_1/BatchNorm/moving_variance/Assign"
  input: "^monodepth2_model/encoder/conv3_1/BatchNorm_1/beta/Assign"
  input: "^monodepth2_model/encoder/conv3_1/BatchNorm_1/gamma/Assign"
  input: "^monodepth2_model/encoder/conv3_1/BatchNorm_1/moving_mean/Assign"
  input: "^monodepth2_model/encoder/conv3_1/BatchNorm_1/moving_variance/Assign"
  input: "^monodepth2_model/encoder/conv3_1/conv1/weights/Assign"
  input: "^monodepth2_model/encoder/conv3_1/conv2/weights/Assign"
  input: "^monodepth2_model/encoder/conv3_1/shortcut/weights/Assign"
  input: "^monodepth2_model/encoder/conv3_2/BatchNorm/beta/Assign"
  input: "^monodepth2_model/encoder/conv3_2/BatchNorm/gamma/Assign"
  input: "^monodepth2_model/encoder/conv3_2/BatchNorm/moving_mean/Assign"
  input: "^monodepth2_model/encoder/conv3_2/BatchNorm/moving_variance/Assign"
  input: "^monodepth2_model/encoder/conv3_2/BatchNorm_1/beta/Assign"
  input: "^monodepth2_model/encoder/conv3_2/BatchNorm_1/gamma/Assign"
  input: "^monodepth2_model/encoder/conv3_2/BatchNorm_1/moving_mean/Assign"
  input: "^monodepth2_model/encoder/conv3_2/BatchNorm_1/moving_variance/Assign"
  input: "^monodepth2_model/encoder/conv3_2/conv1/weights/Assign"
  input: "^monodepth2_model/encoder/conv3_2/conv2/weights/Assign"
  input: "^monodepth2_model/encoder/conv4_1/BatchNorm/beta/Assign"
  input: "^monodepth2_model/encoder/conv4_1/BatchNorm/gamma/Assign"
  input: "^monodepth2_model/encoder/conv4_1/BatchNorm/moving_mean/Assign"
  input: "^monodepth2_model/encoder/conv4_1/BatchNorm/moving_variance/Assign"
  input: "^monodepth2_model/encoder/conv4_1/BatchNorm_1/beta/Assign"
  input: "^monodepth2_model/encoder/conv4_1/BatchNorm_1/gamma/Assign"
  input: "^monodepth2_model/encoder/conv4_1/BatchNorm_1/moving_mean/Assign"
  input: "^monodepth2_model/encoder/conv4_1/BatchNorm_1/moving_variance/Assign"
  input: "^monodepth2_model/encoder/conv4_1/conv1/weights/Assign"
  input: "^monodepth2_model/encoder/conv4_1/conv2/weights/Assign"
  input: "^monodepth2_model/encoder/conv4_1/shortcut/weights/Assign"
  input: "^monodepth2_model/encoder/conv4_2/BatchNorm/beta/Assign"
  input: "^monodepth2_model/encoder/conv4_2/BatchNorm/gamma/Assign"
  input: "^monodepth2_model/encoder/conv4_2/BatchNorm/moving_mean/Assign"
  input: "^monodepth2_model/encoder/conv4_2/BatchNorm/moving_variance/Assign"
  input: "^monodepth2_model/encoder/conv4_2/BatchNorm_1/beta/Assign"
  input: "^monodepth2_model/encoder/conv4_2/BatchNorm_1/gamma/Assign"
  input: "^monodepth2_model/encoder/conv4_2/BatchNorm_1/moving_mean/Assign"
  input: "^monodepth2_model/encoder/conv4_2/BatchNorm_1/moving_variance/Assign"
  input: "^monodepth2_model/encoder/conv4_2/conv1/weights/Assign"
  input: "^monodepth2_model/encoder/conv4_2/conv2/weights/Assign"
  input: "^monodepth2_model/encoder/conv5_1/BatchNorm/beta/Assign"
  input: "^monodepth2_model/encoder/conv5_1/BatchNorm/gamma/Assign"
  input: "^monodepth2_model/encoder/conv5_1/BatchNorm/moving_mean/Assign"
  input: "^monodepth2_model/encoder/conv5_1/BatchNorm/moving_variance/Assign"
  input: "^monodepth2_model/encoder/conv5_1/BatchNorm_1/beta/Assign"
  input: "^monodepth2_model/encoder/conv5_1/BatchNorm_1/gamma/Assign"
  input: "^monodepth2_model/encoder/conv5_1/BatchNorm_1/moving_mean/Assign"
  input: "^monodepth2_model/encoder/conv5_1/BatchNorm_1/moving_variance/Assign"
  input: "^monodepth2_model/encoder/conv5_1/conv1/weights/Assign"
  input: "^monodepth2_model/encoder/conv5_1/conv2/weights/Assign"
  input: "^monodepth2_model/encoder/conv5_1/shortcut/weights/Assign"
  input: "^monodepth2_model/encoder/conv5_2/BatchNorm/beta/Assign"
  input: "^monodepth2_model/encoder/conv5_2/BatchNorm/gamma/Assign"
  input: "^monodepth2_model/encoder/conv5_2/BatchNorm/moving_mean/Assign"
  input: "^monodepth2_model/encoder/conv5_2/BatchNorm/moving_variance/Assign"
  input: "^monodepth2_model/encoder/conv5_2/BatchNorm_1/beta/Assign"
  input: "^monodepth2_model/encoder/conv5_2/BatchNorm_1/gamma/Assign"
  input: "^monodepth2_model/encoder/conv5_2/BatchNorm_1/moving_mean/Assign"
  input: "^monodepth2_model/encoder/conv5_2/BatchNorm_1/moving_variance/Assign"
  input: "^monodepth2_model/encoder/conv5_2/conv1/weights/Assign"
  input: "^monodepth2_model/encoder/conv5_2/conv2/weights/Assign"
}
versions {
  producer: 134
}
